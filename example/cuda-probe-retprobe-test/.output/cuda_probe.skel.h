/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __CUDA_PROBE_BPF_SKEL_H__
#define __CUDA_PROBE_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct cuda_probe_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *start_ts;
		struct bpf_map *call_count;
		struct bpf_map *total_time_ns;
		struct bpf_map *rodata_str1_1;
	} maps;
	struct {
		struct bpf_program *probe__cuda;
		struct bpf_program *retprobe__cuda;
	} progs;
	struct {
		struct bpf_link *probe__cuda;
		struct bpf_link *retprobe__cuda;
	} links;

#ifdef __cplusplus
	static inline struct cuda_probe_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct cuda_probe_bpf *open_and_load();
	static inline int load(struct cuda_probe_bpf *skel);
	static inline int attach(struct cuda_probe_bpf *skel);
	static inline void detach(struct cuda_probe_bpf *skel);
	static inline void destroy(struct cuda_probe_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
cuda_probe_bpf__destroy(struct cuda_probe_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
cuda_probe_bpf__create_skeleton(struct cuda_probe_bpf *obj);

static inline struct cuda_probe_bpf *
cuda_probe_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct cuda_probe_bpf *obj;
	int err;

	obj = (struct cuda_probe_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = cuda_probe_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	cuda_probe_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct cuda_probe_bpf *
cuda_probe_bpf__open(void)
{
	return cuda_probe_bpf__open_opts(NULL);
}

static inline int
cuda_probe_bpf__load(struct cuda_probe_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct cuda_probe_bpf *
cuda_probe_bpf__open_and_load(void)
{
	struct cuda_probe_bpf *obj;
	int err;

	obj = cuda_probe_bpf__open();
	if (!obj)
		return NULL;
	err = cuda_probe_bpf__load(obj);
	if (err) {
		cuda_probe_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
cuda_probe_bpf__attach(struct cuda_probe_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
cuda_probe_bpf__detach(struct cuda_probe_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *cuda_probe_bpf__elf_bytes(size_t *sz);

static inline int
cuda_probe_bpf__create_skeleton(struct cuda_probe_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "cuda_probe_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 4;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "start_ts";
	s->maps[0].map = &obj->maps.start_ts;

	s->maps[1].name = "call_count";
	s->maps[1].map = &obj->maps.call_count;

	s->maps[2].name = "total_time_ns";
	s->maps[2].map = &obj->maps.total_time_ns;

	s->maps[3].name = ".rodata.str1.1";
	s->maps[3].map = &obj->maps.rodata_str1_1;

	/* programs */
	s->prog_cnt = 2;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "probe__cuda";
	s->progs[0].prog = &obj->progs.probe__cuda;
	s->progs[0].link = &obj->links.probe__cuda;

	s->progs[1].name = "retprobe__cuda";
	s->progs[1].prog = &obj->progs.retprobe__cuda;
	s->progs[1].link = &obj->links.retprobe__cuda;

	s->data = cuda_probe_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *cuda_probe_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x40\x14\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0c\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x6b\x70\
\x72\x6f\x62\x65\x2f\x5f\x5a\x39\x76\x65\x63\x74\x6f\x72\x41\x64\x64\x50\x4b\
\x66\x53\x30\x5f\x50\x66\0\x6b\x72\x65\x74\x70\x72\x6f\x62\x65\x2f\x5f\x5a\x39\
\x76\x65\x63\x74\x6f\x72\x41\x64\x64\x50\x4b\x66\x53\x30\x5f\x50\x66\0\x2e\x6d\
\x61\x70\x73\0\x2e\x72\x6f\x64\x61\x74\x61\x2e\x73\x74\x72\x31\x2e\x31\0\x6c\
\x69\x63\x65\x6e\x73\x65\0\x63\x75\x64\x61\x5f\x70\x72\x6f\x62\x65\x2e\x62\x70\
\x66\x2e\x63\0\x4c\x42\x42\x30\x5f\x32\0\x4c\x42\x42\x30\x5f\x33\0\x4c\x42\x42\
\x31\x5f\x35\0\x4c\x42\x42\x31\x5f\x33\0\x4c\x42\x42\x31\x5f\x34\0\x4c\x42\x42\
\x31\x5f\x36\0\x70\x72\x6f\x62\x65\x5f\x5f\x63\x75\x64\x61\0\x73\x74\x61\x72\
\x74\x5f\x74\x73\0\x63\x61\x6c\x6c\x5f\x63\x6f\x75\x6e\x74\0\x72\x65\x74\x70\
\x72\x6f\x62\x65\x5f\x5f\x63\x75\x64\x61\0\x74\x6f\x74\x61\x6c\x5f\x74\x69\x6d\
\x65\x5f\x6e\x73\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2e\x72\x65\x6c\x6b\x70\x72\
\x6f\x62\x65\x2f\x5f\x5a\x39\x76\x65\x63\x74\x6f\x72\x41\x64\x64\x50\x4b\x66\
\x53\x30\x5f\x50\x66\0\x2e\x72\x65\x6c\x6b\x72\x65\x74\x70\x72\x6f\x62\x65\x2f\
\x5f\x5a\x39\x76\x65\x63\x74\x6f\x72\x41\x64\x64\x50\x4b\x66\x53\x30\x5f\x50\
\x66\0\x2e\x42\x54\x46\0\x2e\x42\x54\x46\x2e\x65\x78\x74\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x69\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7a\0\0\
\0\0\0\x03\0\x30\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81\0\0\0\0\0\x03\0\x68\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x88\0\0\0\0\0\x04\0\x58\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x8f\0\0\0\0\0\x04\0\
\x28\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x96\0\0\0\0\0\x04\0\x60\x02\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x9d\0\0\0\0\0\x04\0\x80\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa4\0\0\
\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x38\x02\0\0\0\0\0\0\xb0\0\0\0\x11\0\x05\0\0\0\0\
\0\0\0\0\0\x20\0\0\0\0\0\0\0\xb9\0\0\0\x11\0\x05\0\x20\0\0\0\0\0\0\0\x20\0\0\0\
\0\0\0\0\xc4\0\0\0\x12\0\x04\0\0\0\0\0\0\0\0\0\x90\x03\0\0\0\0\0\0\xd3\0\0\0\
\x11\0\x05\0\x40\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\xe1\0\0\0\x11\0\x07\0\0\0\0\0\
\0\0\0\0\x04\0\0\0\0\0\0\0\x85\0\0\0\x0e\0\0\0\x77\0\0\0\x20\0\0\0\x63\x0a\xfc\
\xff\0\0\0\0\x85\0\0\0\xf6\x01\0\0\x7b\x0a\xf0\xff\0\0\0\0\xbf\xa6\0\0\0\0\0\0\
\x07\x06\0\0\xe8\xff\xff\xff\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xe0\xff\xff\xff\
\xbf\xa3\0\0\0\0\0\0\x07\x03\0\0\xd8\xff\xff\xff\xbf\x61\0\0\0\0\0\0\x85\0\0\0\
\xf7\x01\0\0\xbf\xa3\0\0\0\0\0\0\x07\x03\0\0\xf0\xff\xff\xff\x18\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\xbf\x62\0\0\0\0\0\0\xb7\x04\0\0\0\0\0\0\x85\0\0\0\x02\0\0\0\
\xb7\x01\0\0\x01\0\0\0\x7b\x1a\xd0\xff\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\
\xfc\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\x15\0\
\x0a\0\0\0\0\0\x79\x01\0\0\0\0\0\0\x07\x01\0\0\x01\0\0\0\x7b\x10\0\0\0\0\0\0\
\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xfc\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\xbf\x03\0\0\0\0\0\0\xb7\x04\0\0\x02\0\0\0\x05\0\x07\0\0\0\0\0\xbf\xa2\0\
\0\0\0\0\0\x07\x02\0\0\xfc\xff\xff\xff\xbf\xa3\0\0\0\0\0\0\x07\x03\0\0\xd0\xff\
\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x04\0\0\x01\0\0\0\x85\0\0\0\
\x02\0\0\0\xb7\x01\0\0\x6c\x75\x0a\0\x63\x1a\xc8\xff\0\0\0\0\x18\x01\0\0\x6c\
\x75\x2c\x20\0\0\0\0\x74\x73\x3d\x25\x7b\x1a\xc0\xff\0\0\0\0\x18\x01\0\0\x30\
\x5f\x50\x66\0\0\0\0\x20\x78\x3d\x25\x7b\x1a\xb8\xff\0\0\0\0\x18\x01\0\0\x72\
\x41\x64\x64\0\0\0\0\x50\x4b\x66\x53\x7b\x1a\xb0\xff\0\0\0\0\x18\x01\0\0\x5f\
\x5a\x39\x76\0\0\0\0\x65\x63\x74\x6f\x7b\x1a\xa8\xff\0\0\0\0\x18\x01\0\0\x45\
\x6e\x74\x65\0\0\0\0\x72\x65\x64\x20\x7b\x1a\xa0\xff\0\0\0\0\x79\xa3\xe8\xff\0\
\0\0\0\x79\xa4\xf0\xff\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\xa0\xff\xff\xff\
\xb7\x02\0\0\x2c\0\0\0\x85\0\0\0\x06\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\
\xbf\xa6\0\0\0\0\0\0\x07\x06\0\0\xf8\xff\xff\xff\xbf\xa2\0\0\0\0\0\0\x07\x02\0\
\0\xf0\xff\xff\xff\xbf\xa3\0\0\0\0\0\0\x07\x03\0\0\xe8\xff\xff\xff\xbf\x61\0\0\
\0\0\0\0\x85\0\0\0\xf7\x01\0\0\x85\0\0\0\x0e\0\0\0\x77\0\0\0\x20\0\0\0\x63\x0a\
\xe4\xff\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xbf\x62\0\0\0\0\0\0\x85\0\
\0\0\x01\0\0\0\xbf\x06\0\0\0\0\0\0\x15\x06\x1a\0\0\0\0\0\x85\0\0\0\xf6\x01\0\0\
\xbf\x07\0\0\0\0\0\0\x79\x61\0\0\0\0\0\0\x1f\x17\0\0\0\0\0\0\x7b\x7a\xd8\xff\0\
\0\0\0\xbf\xa8\0\0\0\0\0\0\x07\x08\0\0\xe4\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\xbf\x82\0\0\0\0\0\0\x85\0\0\0\x03\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xbf\x82\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\x15\0\x24\0\0\0\0\0\x79\x01\
\0\0\0\0\0\0\x0f\x71\0\0\0\0\0\0\x7b\x10\0\0\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\
\x02\0\0\xe4\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xbf\x03\0\0\0\0\0\
\0\xb7\x04\0\0\x02\0\0\0\x05\0\x21\0\0\0\0\0\xb7\x01\0\0\x0a\0\0\0\x6b\x1a\xc0\
\xff\0\0\0\0\x18\x01\0\0\x66\x20\x78\x3d\0\0\0\0\x25\x6c\x75\x20\x7b\x1a\xb8\
\xff\0\0\0\0\x18\x01\0\0\x64\x50\x4b\x66\0\0\0\0\x53\x30\x5f\x50\x7b\x1a\xb0\
\xff\0\0\0\0\x18\x01\0\0\x76\x65\x63\x74\0\0\0\0\x6f\x72\x41\x64\x7b\x1a\xa8\
\xff\0\0\0\0\x18\x01\0\0\x74\x73\x70\x29\0\0\0\0\x20\x5f\x5a\x39\x7b\x1a\xa0\
\xff\0\0\0\0\x18\x01\0\0\x77\x69\x74\x68\0\0\0\0\x6f\x75\x74\x20\x7b\x1a\x98\
\xff\0\0\0\0\x18\x01\0\0\x45\x78\x69\x74\0\0\0\0\x65\x64\x20\x28\x7b\x1a\x90\
\xff\0\0\0\0\x79\xa3\xf8\xff\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\x90\xff\
\xff\xff\xb7\x02\0\0\x32\0\0\0\x85\0\0\0\x06\0\0\0\x05\0\x2b\0\0\0\0\0\xbf\xa2\
\0\0\0\0\0\0\x07\x02\0\0\xe4\xff\xff\xff\xbf\xa3\0\0\0\0\0\0\x07\x03\0\0\xd8\
\xff\xff\xff\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x04\0\0\x01\0\0\0\x85\0\0\
\0\x02\0\0\0\xb7\x01\0\0\x0a\0\0\0\x6b\x1a\xd4\xff\0\0\0\0\xb7\x01\0\0\x6c\x75\
\x6e\x73\x63\x1a\xd0\xff\0\0\0\0\x18\x01\0\0\x6c\x75\x20\x74\0\0\0\0\x73\x70\
\x3d\x25\x7b\x1a\xc8\xff\0\0\0\0\x18\x01\0\0\x61\x74\x69\x6f\0\0\0\0\x6e\x3d\
\x25\x6c\x7b\x1a\xc0\xff\0\0\0\0\x18\x01\0\0\x3d\x25\x6c\x75\0\0\0\0\x20\x64\
\x75\x72\x7b\x1a\xb8\xff\0\0\0\0\x18\x01\0\0\x66\x53\x30\x5f\0\0\0\0\x50\x66\
\x20\x78\x7b\x1a\xb0\xff\0\0\0\0\x18\x01\0\0\x74\x6f\x72\x41\0\0\0\0\x64\x64\
\x50\x4b\x7b\x1a\xa8\xff\0\0\0\0\x18\x01\0\0\x29\x20\x5f\x5a\0\0\0\0\x39\x76\
\x65\x63\x7b\x1a\xa0\xff\0\0\0\0\x18\x01\0\0\x77\x69\x74\x68\0\0\0\0\x20\x74\
\x73\x70\x7b\x1a\x98\xff\0\0\0\0\x18\x01\0\0\x45\x78\x69\x74\0\0\0\0\x65\x64\
\x20\x28\x7b\x1a\x90\xff\0\0\0\0\x79\x65\0\0\0\0\0\0\x79\xa3\xf8\xff\0\0\0\0\
\x79\xa4\xd8\xff\0\0\0\0\xbf\xa1\0\0\0\0\0\0\x07\x01\0\0\x90\xff\xff\xff\xb7\
\x02\0\0\x46\0\0\0\x85\0\0\0\x06\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x45\x6e\x74\x65\x72\x65\x64\x20\x5f\x5a\x39\
\x76\x65\x63\x74\x6f\x72\x41\x64\x64\x50\x4b\x66\x53\x30\x5f\x50\x66\x20\x78\
\x3d\x25\x6c\x75\x2c\x20\x74\x73\x3d\x25\x6c\x75\x0a\0\x45\x78\x69\x74\x65\x64\
\x20\x28\x77\x69\x74\x68\x20\x74\x73\x70\x29\x20\x5f\x5a\x39\x76\x65\x63\x74\
\x6f\x72\x41\x64\x64\x50\x4b\x66\x53\x30\x5f\x50\x66\x20\x78\x3d\x25\x6c\x75\
\x20\x64\x75\x72\x61\x74\x69\x6f\x6e\x3d\x25\x6c\x6c\x75\x20\x74\x73\x70\x3d\
\x25\x6c\x75\x6e\x73\x0a\0\x45\x78\x69\x74\x65\x64\x20\x28\x77\x69\x74\x68\x6f\
\x75\x74\x20\x74\x73\x70\x29\x20\x5f\x5a\x39\x76\x65\x63\x74\x6f\x72\x41\x64\
\x64\x50\x4b\x66\x53\x30\x5f\x50\x66\x20\x78\x3d\x25\x6c\x75\x20\x0a\0\x47\x50\
\x4c\0\x78\0\0\0\0\0\0\0\x01\0\0\0\x0b\0\0\0\xc0\0\0\0\0\0\0\0\x01\0\0\0\x0c\0\
\0\0\x08\x01\0\0\0\0\0\0\x01\0\0\0\x0c\0\0\0\x50\x01\0\0\0\0\0\0\x01\0\0\0\x0c\
\0\0\0\x58\0\0\0\0\0\0\0\x01\0\0\0\x0b\0\0\0\xc0\0\0\0\0\0\0\0\x01\0\0\0\x0b\0\
\0\0\xe0\0\0\0\0\0\0\0\x01\0\0\0\x0e\0\0\0\x30\x01\0\0\0\0\0\0\x01\0\0\0\x0e\0\
\0\0\x48\x02\0\0\0\0\0\0\x01\0\0\0\x0e\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\
\xe0\x01\0\0\xe0\x01\0\0\xbd\x04\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\
\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x01\
\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x06\0\0\0\0\0\
\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\x02\x08\0\0\
\0\x19\0\0\0\0\0\0\x08\x09\0\0\0\x1d\0\0\0\0\0\0\x08\x0a\0\0\0\x23\0\0\0\0\0\0\
\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x0c\0\0\0\x30\0\0\0\0\0\0\x08\x0d\0\
\0\0\x34\0\0\0\0\0\0\x08\x0e\0\0\0\x3a\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\
\0\0\x04\0\0\x04\x20\0\0\0\x4d\0\0\0\x01\0\0\0\0\0\0\0\x52\0\0\0\x05\0\0\0\x40\
\0\0\0\x5e\0\0\0\x07\0\0\0\x80\0\0\0\x62\0\0\0\x0b\0\0\0\xc0\0\0\0\x68\0\0\0\0\
\0\0\x0e\x0f\0\0\0\x01\0\0\0\x71\0\0\0\0\0\0\x0e\x0f\0\0\0\x01\0\0\0\x7c\0\0\0\
\0\0\0\x0e\x0f\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x0d\x02\0\0\0\x8a\0\0\0\x01\0\0\
\x0c\x13\0\0\0\x96\0\0\0\x01\0\0\x0c\x13\0\0\0\xa5\0\0\0\0\0\0\x01\x01\0\0\0\
\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x16\0\0\0\x04\0\0\0\x04\0\0\0\xaa\0\0\0\
\0\0\0\x0e\x17\0\0\0\x01\0\0\0\x74\x04\0\0\x03\0\0\x0f\x60\0\0\0\x10\0\0\0\0\0\
\0\0\x20\0\0\0\x11\0\0\0\x20\0\0\0\x20\0\0\0\x12\0\0\0\x40\0\0\0\x20\0\0\0\x7a\
\x04\0\0\x01\0\0\x0f\x04\0\0\0\x18\0\0\0\0\0\0\0\x04\0\0\0\0\x69\x6e\x74\0\x5f\
\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x75\
\x33\x32\0\x5f\x5f\x75\x33\x32\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x69\x6e\
\x74\0\x75\x36\x34\0\x5f\x5f\x75\x36\x34\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\
\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x74\x79\x70\x65\0\x6d\x61\x78\x5f\x65\
\x6e\x74\x72\x69\x65\x73\0\x6b\x65\x79\0\x76\x61\x6c\x75\x65\0\x73\x74\x61\x72\
\x74\x5f\x74\x73\0\x63\x61\x6c\x6c\x5f\x63\x6f\x75\x6e\x74\0\x74\x6f\x74\x61\
\x6c\x5f\x74\x69\x6d\x65\x5f\x6e\x73\0\x70\x72\x6f\x62\x65\x5f\x5f\x63\x75\x64\
\x61\0\x72\x65\x74\x70\x72\x6f\x62\x65\x5f\x5f\x63\x75\x64\x61\0\x63\x68\x61\
\x72\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2f\x72\x6f\x6f\x74\x2f\x62\x70\x66\x74\
\x69\x6d\x65\x2d\x79\x79\x77\x2f\x65\x78\x61\x6d\x70\x6c\x65\x2f\x63\x75\x64\
\x61\x2d\x70\x72\x6f\x62\x65\x2d\x72\x65\x74\x70\x72\x6f\x62\x65\x2d\x74\x65\
\x73\x74\x2f\x63\x75\x64\x61\x5f\x70\x72\x6f\x62\x65\x2e\x62\x70\x66\x2e\x63\0\
\x09\x75\x33\x32\x20\x70\x69\x64\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\
\x63\x75\x72\x72\x65\x6e\x74\x5f\x70\x69\x64\x5f\x74\x67\x69\x64\x28\x29\x20\
\x3e\x3e\x20\x33\x32\x3b\0\x09\x75\x36\x34\x20\x74\x73\x20\x3d\x20\x62\x70\x66\
\x5f\x67\x65\x74\x5f\x67\x6c\x6f\x62\x61\x6c\x74\x69\x6d\x65\x72\x28\x29\x3b\0\
\x09\x62\x70\x66\x5f\x67\x65\x74\x5f\x62\x6c\x6f\x63\x6b\x5f\x69\x64\x78\x28\
\x26\x78\x2c\x20\x26\x79\x2c\x20\x26\x7a\x29\x3b\0\x09\x62\x70\x66\x5f\x6d\x61\
\x70\x5f\x75\x70\x64\x61\x74\x65\x5f\x65\x6c\x65\x6d\x28\x26\x73\x74\x61\x72\
\x74\x5f\x74\x73\x2c\x20\x26\x78\x2c\x20\x26\x74\x73\x2c\x20\x42\x50\x46\x5f\
\x41\x4e\x59\x29\x3b\0\x09\x75\x36\x34\x20\x6f\x6e\x65\x20\x3d\x20\x31\x3b\0\
\x09\x75\x36\x34\x20\x2a\x63\x6e\x74\x20\x3d\x20\x62\x70\x66\x5f\x6d\x61\x70\
\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\x28\x26\x63\x61\x6c\x6c\x5f\
\x63\x6f\x75\x6e\x74\x2c\x20\x26\x70\x69\x64\x29\x3b\0\x09\x69\x66\x20\x28\x63\
\x6e\x74\x29\x20\x7b\0\x09\x09\x2a\x63\x6e\x74\x20\x2b\x3d\x20\x31\x3b\0\x09\
\x09\x62\x70\x66\x5f\x6d\x61\x70\x5f\x75\x70\x64\x61\x74\x65\x5f\x65\x6c\x65\
\x6d\x28\x26\x63\x61\x6c\x6c\x5f\x63\x6f\x75\x6e\x74\x2c\x20\x26\x70\x69\x64\
\x2c\x20\x63\x6e\x74\x2c\x20\x42\x50\x46\x5f\x45\x58\x49\x53\x54\x29\x3b\0\x09\
\x09\x62\x70\x66\x5f\x6d\x61\x70\x5f\x75\x70\x64\x61\x74\x65\x5f\x65\x6c\x65\
\x6d\x28\x26\x63\x61\x6c\x6c\x5f\x63\x6f\x75\x6e\x74\x2c\x20\x26\x70\x69\x64\
\x2c\x20\x26\x6f\x6e\x65\x2c\x20\x42\x50\x46\x5f\x4e\x4f\x45\x58\x49\x53\x54\
\x29\x3b\0\x09\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x45\x6e\x74\x65\
\x72\x65\x64\x20\x5f\x5a\x39\x76\x65\x63\x74\x6f\x72\x41\x64\x64\x50\x4b\x66\
\x53\x30\x5f\x50\x66\x20\x78\x3d\x25\x6c\x75\x2c\x20\x74\x73\x3d\x25\x6c\x75\
\x5c\x6e\x22\x2c\x20\x78\x2c\x20\x74\x73\x29\x3b\0\x09\x72\x65\x74\x75\x72\x6e\
\x20\x30\x3b\0\x69\x6e\x74\x20\x72\x65\x74\x70\x72\x6f\x62\x65\x5f\x5f\x63\x75\
\x64\x61\x28\x29\0\x09\x75\x36\x34\x20\x2a\x74\x73\x70\x20\x3d\x20\x62\x70\x66\
\x5f\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\x28\x26\x73\
\x74\x61\x72\x74\x5f\x74\x73\x2c\x20\x26\x78\x29\x3b\0\x09\x69\x66\x20\x28\x74\
\x73\x70\x29\x20\x7b\0\x09\x09\x75\x36\x34\x20\x64\x65\x6c\x74\x61\x20\x3d\x20\
\x62\x70\x66\x5f\x67\x65\x74\x5f\x67\x6c\x6f\x62\x61\x6c\x74\x69\x6d\x65\x72\
\x28\x29\x20\x2d\x20\x2a\x74\x73\x70\x3b\0\x09\x09\x62\x70\x66\x5f\x6d\x61\x70\
\x5f\x64\x65\x6c\x65\x74\x65\x5f\x65\x6c\x65\x6d\x28\x26\x73\x74\x61\x72\x74\
\x5f\x74\x73\x2c\x20\x26\x70\x69\x64\x29\x3b\0\x09\x09\x75\x36\x34\x20\x2a\x74\
\x6f\x74\x61\x6c\x20\x3d\x20\x62\x70\x66\x5f\x6d\x61\x70\x5f\x6c\x6f\x6f\x6b\
\x75\x70\x5f\x65\x6c\x65\x6d\x28\x26\x74\x6f\x74\x61\x6c\x5f\x74\x69\x6d\x65\
\x5f\x6e\x73\x2c\x20\x26\x70\x69\x64\x29\x3b\0\x09\x09\x69\x66\x20\x28\x74\x6f\
\x74\x61\x6c\x29\x20\x7b\0\x09\x09\x09\x2a\x74\x6f\x74\x61\x6c\x20\x2b\x3d\x20\
\x64\x65\x6c\x74\x61\x3b\0\x09\x09\x09\x62\x70\x66\x5f\x6d\x61\x70\x5f\x75\x70\
\x64\x61\x74\x65\x5f\x65\x6c\x65\x6d\x28\x26\x74\x6f\x74\x61\x6c\x5f\x74\x69\
\x6d\x65\x5f\x6e\x73\x2c\x20\x26\x70\x69\x64\x2c\x20\x74\x6f\x74\x61\x6c\x2c\0\
\x09\x09\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x45\x78\x69\x74\x65\
\x64\x20\x28\x77\x69\x74\x68\x6f\x75\x74\x20\x74\x73\x70\x29\x20\x5f\x5a\x39\
\x76\x65\x63\x74\x6f\x72\x41\x64\x64\x50\x4b\x66\x53\x30\x5f\x50\x66\x20\x78\
\x3d\x25\x6c\x75\x20\x5c\x6e\x22\x2c\0\x09\x09\x09\x62\x70\x66\x5f\x6d\x61\x70\
\x5f\x75\x70\x64\x61\x74\x65\x5f\x65\x6c\x65\x6d\x28\x26\x74\x6f\x74\x61\x6c\
\x5f\x74\x69\x6d\x65\x5f\x6e\x73\x2c\x20\x26\x70\x69\x64\x2c\x20\x26\x64\x65\
\x6c\x74\x61\x2c\0\x09\x09\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\0\x2e\
\x6d\x61\x70\x73\0\x6c\x69\x63\x65\x6e\x73\x65\0\x6b\x70\x72\x6f\x62\x65\x2f\
\x5f\x5a\x39\x76\x65\x63\x74\x6f\x72\x41\x64\x64\x50\x4b\x66\x53\x30\x5f\x50\
\x66\0\x6b\x72\x65\x74\x70\x72\x6f\x62\x65\x2f\x5f\x5a\x39\x76\x65\x63\x74\x6f\
\x72\x41\x64\x64\x50\x4b\x66\x53\x30\x5f\x50\x66\0\0\0\0\x9f\xeb\x01\0\x20\0\0\
\0\0\0\0\0\x24\0\0\0\x24\0\0\0\xe4\x02\0\0\x08\x03\0\0\0\0\0\0\x08\0\0\0\x82\
\x04\0\0\x01\0\0\0\0\0\0\0\x14\0\0\0\x9e\x04\0\0\x01\0\0\0\0\0\0\0\x15\0\0\0\
\x10\0\0\0\x82\x04\0\0\x14\0\0\0\0\0\0\0\xb2\0\0\0\xf6\0\0\0\x0c\x9c\0\0\x08\0\
\0\0\xb2\0\0\0\xf6\0\0\0\x27\x9c\0\0\x10\0\0\0\xb2\0\0\0\xf6\0\0\0\x06\x9c\0\0\
\x18\0\0\0\xb2\0\0\0\x23\x01\0\0\x0b\xa0\0\0\x20\0\0\0\xb2\0\0\0\x23\x01\0\0\
\x06\xa0\0\0\x30\0\0\0\xb2\0\0\0\xf6\0\0\0\x0c\x9c\0\0\x58\0\0\0\xb2\0\0\0\x44\
\x01\0\0\x02\xa8\0\0\x70\0\0\0\xb2\0\0\0\xf6\0\0\0\x0c\x9c\0\0\x78\0\0\0\xb2\0\
\0\0\x64\x01\0\0\x02\xb0\0\0\xa8\0\0\0\xb2\0\0\0\x97\x01\0\0\x06\xbc\0\0\xb8\0\
\0\0\xb2\0\0\0\xf6\0\0\0\x0c\x9c\0\0\xc0\0\0\0\xb2\0\0\0\xa5\x01\0\0\x0d\xc0\0\
\0\xd8\0\0\0\xb2\0\0\0\xd9\x01\0\0\x06\xc4\0\0\xe0\0\0\0\xb2\0\0\0\xe5\x01\0\0\
\x08\xc8\0\0\x08\x01\0\0\xb2\0\0\0\xf2\x01\0\0\x03\xcc\0\0\x38\x01\0\0\xb2\0\0\
\0\0\0\0\0\0\0\0\0\x50\x01\0\0\xb2\0\0\0\x2c\x02\0\0\x03\xd4\0\0\x68\x01\0\0\
\xb2\0\0\0\0\0\0\0\0\0\0\0\x78\x01\0\0\xb2\0\0\0\x69\x02\0\0\x02\xe0\0\0\x28\
\x02\0\0\xb2\0\0\0\xad\x02\0\0\x02\xe8\0\0\x9e\x04\0\0\x19\0\0\0\0\0\0\0\xb2\0\
\0\0\xb8\x02\0\0\0\xf8\0\0\x08\0\0\0\xb2\0\0\0\0\0\0\0\0\0\0\0\x30\0\0\0\xb2\0\
\0\0\x44\x01\0\0\x02\x04\x01\0\x40\0\0\0\xb2\0\0\0\xf6\0\0\0\x0c\x08\x01\0\x48\
\0\0\0\xb2\0\0\0\xf6\0\0\0\x27\x08\x01\0\x50\0\0\0\xb2\0\0\0\xf6\0\0\0\x06\x08\
\x01\0\x58\0\0\0\xb2\0\0\0\xcd\x02\0\0\x0d\x0c\x01\0\x80\0\0\0\xb2\0\0\0\xfd\
\x02\0\0\x06\x14\x01\0\x88\0\0\0\xb2\0\0\0\x09\x03\0\0\x0f\x18\x01\0\x98\0\0\0\
\xb2\0\0\0\x09\x03\0\0\x27\x18\x01\0\xa0\0\0\0\xb2\0\0\0\x09\x03\0\0\x25\x18\
\x01\0\xa8\0\0\0\xb2\0\0\0\x09\x03\0\0\x07\x18\x01\0\xb8\0\0\0\xb2\0\0\0\x09\
\x03\0\0\x0f\x18\x01\0\xc0\0\0\0\xb2\0\0\0\x35\x03\0\0\x03\x1c\x01\0\xe0\0\0\0\
\xb2\0\0\0\x5d\x03\0\0\x10\x28\x01\0\0\x01\0\0\xb2\0\0\0\x97\x03\0\0\x07\x2c\
\x01\0\x08\x01\0\0\xb2\0\0\0\xa6\x03\0\0\x0b\x30\x01\0\x28\x01\0\0\xb2\0\0\0\0\
\0\0\0\0\0\0\0\x30\x01\0\0\xb2\0\0\0\xba\x03\0\0\x04\x34\x01\0\x60\x01\0\0\xb2\
\0\0\0\xee\x03\0\0\x03\x5c\x01\0\x30\x02\0\0\xb2\0\0\0\0\0\0\0\0\0\0\0\x48\x02\
\0\0\xb2\0\0\0\x31\x04\0\0\x04\x40\x01\0\x60\x02\0\0\xb2\0\0\0\0\0\0\0\0\0\0\0\
\x70\x02\0\0\xb2\0\0\0\x66\x04\0\0\x03\x4c\x01\0\x80\x03\0\0\xb2\0\0\0\xad\x02\
\0\0\x02\x6c\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\
\x03\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x3a\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\x02\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\x01\0\0\0\
\0\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\0\0\0\x06\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\0\0\x38\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x2d\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x38\x05\0\0\0\0\0\0\x90\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x4c\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc8\
\x08\0\0\0\0\0\0\x60\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x52\0\0\0\x01\0\0\0\x32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\x09\0\0\0\0\0\
\0\xa4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x61\0\
\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xcc\x09\0\0\0\0\0\0\x04\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe9\0\0\0\x09\0\0\0\
\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd0\x09\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x02\0\
\0\0\x03\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x09\x01\0\0\x09\0\0\0\x40\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x0a\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\x02\0\0\0\
\x04\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x2c\x01\0\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x60\x0a\0\0\0\0\0\0\xb5\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x31\x01\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x18\x11\0\0\0\0\0\0\x28\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct cuda_probe_bpf *cuda_probe_bpf::open(const struct bpf_object_open_opts *opts) { return cuda_probe_bpf__open_opts(opts); }
struct cuda_probe_bpf *cuda_probe_bpf::open_and_load() { return cuda_probe_bpf__open_and_load(); }
int cuda_probe_bpf::load(struct cuda_probe_bpf *skel) { return cuda_probe_bpf__load(skel); }
int cuda_probe_bpf::attach(struct cuda_probe_bpf *skel) { return cuda_probe_bpf__attach(skel); }
void cuda_probe_bpf::detach(struct cuda_probe_bpf *skel) { cuda_probe_bpf__detach(skel); }
void cuda_probe_bpf::destroy(struct cuda_probe_bpf *skel) { cuda_probe_bpf__destroy(skel); }
const void *cuda_probe_bpf::elf_bytes(size_t *sz) { return cuda_probe_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
cuda_probe_bpf__assert(struct cuda_probe_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __CUDA_PROBE_BPF_SKEL_H__ */
