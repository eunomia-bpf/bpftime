#ifndef _DEMO_PTX_PROG_HPP
#define _DEMO_PTX_PROG_HPP

static const char* DEMO_PTX_PROG = R"(
//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_60
.address_size 64

	// .globl	spin_lock               // -- Begin function spin_lock
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.visible .const .align 8 .u64 constData;
.visible .const .align 4 .b8 map_info[4096];
.global .align 1 .b8 _$_str[11] = {65, 100, 100, 105, 110, 103, 32, 37, 100, 10, 0};
.global .align 1 .b8 _$_str1[45] = {107, 101, 114, 110, 101, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 116, 101, 114, 101, 100, 44, 32, 109, 101, 109, 61, 37, 108, 120, 44, 32, 109, 101, 109, 115, 122, 61, 37, 108, 100, 10, 0};
.global .align 1 .b8 __const_$_bpf_main_$_buf[16] = {97, 97, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
.global .align 1 .b8 _$_str2[32] = {115, 101, 116, 117, 112, 32, 102, 117, 110, 99, 116, 105, 111, 110, 44, 32, 99, 111, 110, 115, 116, 32, 100, 97, 116, 97, 61, 37, 108, 120, 10, 0};
.global .align 1 .b8 _$_str3[11] = {99, 97, 108, 108, 32, 100, 111, 110, 101, 10, 0};
.global .align 1 .b8 _$_str4[23] = {103, 111, 116, 32, 114, 101, 115, 112, 111, 110, 115, 101, 32, 37, 100, 32, 97, 116, 32, 37, 100, 10, 0};
                                        // @spin_lock
.visible .func spin_lock(
	.param .b64 spin_lock_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<2>;

// %bb.0:
	ld.param.u64 	%rd1, [spin_lock_param_0];
$L__BB0_1:                              // =>This Inner Loop Header: Depth=1
	atom.cas.b32 	%r1, [%rd1], 0, 1;
	setp.eq.s32 	%p1, %r1, 1;
	@%p1 bra 	$L__BB0_1;
// %bb.2:
	ret;
                                        // -- End function
}
	// .globl	spin_unlock             // -- Begin function spin_unlock
.visible .func spin_unlock(
	.param .b64 spin_unlock_param_0
)                                       // @spin_unlock
{
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<2>;

// %bb.0:
	ld.param.u64 	%rd1, [spin_unlock_param_0];
	atom.exch.b32 	%r1, [%rd1], 0;
	ret;
                                        // -- End function
}
	// .globl	make_map_call           // -- Begin function make_map_call
.visible .func  (.param .align 8 .b8 func_retval0[8]) make_map_call(
	.param .b64 make_map_call_param_0,
	.param .b32 make_map_call_param_1
)                                       // @make_map_call
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<16>;

// %bb.0:
	ld.param.u32 	%r1, [make_map_call_param_1];
	ld.param.u64 	%rd6, [make_map_call_param_0];
	ld.const.u64 	%rd9, [constData];
	// begin inline asm
	mov.u64 %rd7, %globaltimer;
	// end inline asm
	add.s64 	%rd8, %rd9, 8;
$L__BB2_1:                              // =>This Inner Loop Header: Depth=1
	atom.cas.b32 	%r2, [%rd8], 0, 1;
	setp.eq.s32 	%p1, %r2, 1;
	@%p1 bra 	$L__BB2_1;
// %bb.2:
	st.u32 	[%rd9+12], %r1;
	st.u64 	[%rd9+16], %rd6;
	add.s64 	%rd10, %rd9, 4;
	mov.u32 	%r3, 42;
	// begin inline asm
	.reg .pred p0;                   
	membar.sys;                      
	st.global.u32 [%rd9], 1;           
	spin_wait:                       
	membar.sys;                      
	ld.global.u32 %r3, [%rd10];          
	setp.eq.u32 p0, %r3, 0;           
	@p0 bra spin_wait;               
	st.global.u32 [%rd10], 0;           
	membar.sys;                      
	
	// end inline asm
	ld.u64 	%rd3, [%rd9+2147483680];
	atom.exch.b32 	%r4, [%rd8], 0;
	// begin inline asm
	mov.u64 %rd11, %globaltimer;
	// end inline asm
	setp.gt.s32 	%p2, %r1, 7;
	@%p2 bra 	$L__BB2_4;
// %bb.3:
	sub.s64 	%rd4, %rd11, %rd7;
	mul.wide.s32 	%rd13, %r1, 8;
	add.s64 	%rd14, %rd9, %rd13;
	add.s64 	%rd5, %rd14, 2147483688;
	atom.add.u64 	%rd15, [%rd5], %rd4;
$L__BB2_4:
	st.param.b64 	[func_retval0+0], %rd3;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0001    // -- Begin function _bpf_helper_ext_0001
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0001(
	.param .b64 _bpf_helper_ext_0001_param_0,
	.param .b64 _bpf_helper_ext_0001_param_1,
	.param .b64 _bpf_helper_ext_0001_param_2,
	.param .b64 _bpf_helper_ext_0001_param_3,
	.param .b64 _bpf_helper_ext_0001_param_4
)                                       // @_bpf_helper_ext_0001
{
	.reg .pred 	%p<7>;
	.reg .b16 	%rs<6>;
	.reg .b32 	%r<16>;
	.reg .b64 	%rd<39>;

// %bb.0:
	ld.param.u64 	%rd15, [_bpf_helper_ext_0001_param_0];
	ld.const.u64 	%rd28, [constData];
	shr.u64 	%rd17, %rd15, 28;
	and.b64  	%rd18, %rd17, 68719476720;
	mov.u64 	%rd19, map_info;
	add.s64 	%rd20, %rd19, %rd18;
	ld.const.u32 	%r6, [%rd20+4];
	setp.lt.s32 	%p1, %r6, 1;
	@%p1 bra 	$L__BB3_7;
// %bb.1:
	ld.param.u64 	%rd16, [_bpf_helper_ext_0001_param_1];
	cvt.u64.u32 	%rd3, %r6;
	cvt.u32.u64 	%r8, %rd3;
	and.b32  	%r15, %r8, 3;
	setp.lt.u32 	%p2, %r8, 4;
	mov.u32 	%r14, 0;
	@%p2 bra 	$L__BB3_4;
// %bb.2:
	add.s64 	%rd2, %rd28, 24;
	and.b64  	%rd4, %rd3, 4294967292;
	add.s64 	%rd5, %rd16, 3;
	mov.u64 	%rd36, 0;
	cvt.u32.u64 	%r9, %rd4;
$L__BB3_3:                              // =>This Inner Loop Header: Depth=1
	add.s64 	%rd22, %rd5, %rd36;
	ld.u8 	%rs1, [%rd22+-3];
	add.s64 	%rd23, %rd2, %rd36;
	st.u8 	[%rd23], %rs1;
	ld.u8 	%rs2, [%rd22+-2];
	st.u8 	[%rd23+1], %rs2;
	ld.u8 	%rs3, [%rd22+-1];
	st.u8 	[%rd23+2], %rs3;
	ld.u8 	%rs4, [%rd22];
	st.u8 	[%rd23+3], %rs4;
	add.s64 	%rd36, %rd36, 4;
	cvt.u32.u64 	%r14, %rd36;
	setp.ne.s32 	%p3, %r9, %r14;
	@%p3 bra 	$L__BB3_3;
$L__BB3_4:
	setp.eq.s32 	%p4, %r15, 0;
	@%p4 bra 	$L__BB3_7;
// %bb.5:
	cvt.u64.u32 	%rd24, %r14;
	add.s64 	%rd25, %rd24, %rd28;
	add.s64 	%rd38, %rd25, 24;
	add.s64 	%rd37, %rd16, %rd24;
$L__BB3_6:                              // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	ld.u8 	%rs5, [%rd37];
	st.u8 	[%rd38], %rs5;
	add.s64 	%rd38, %rd38, 1;
	add.s64 	%rd37, %rd37, 1;
	add.s32 	%r15, %r15, -1;
	setp.ne.s32 	%p5, %r15, 0;
	@%p5 bra 	$L__BB3_6;
$L__BB3_7:
	// begin inline asm
	mov.u64 %rd26, %globaltimer;
	// end inline asm
	add.s64 	%rd27, %rd28, 8;
$L__BB3_8:                              // =>This Inner Loop Header: Depth=1
	atom.cas.b32 	%r10, [%rd27], 0, 1;
	setp.eq.s32 	%p6, %r10, 1;
	@%p6 bra 	$L__BB3_8;
// %bb.9:
	mov.u32 	%r12, 1;
	st.u32 	[%rd28+12], %r12;
	st.u64 	[%rd28+16], %rd15;
	add.s64 	%rd29, %rd28, 4;
	mov.u32 	%r11, 42;
	// begin inline asm
	.reg .pred p0;                   
	membar.sys;                      
	st.global.u32 [%rd28], 1;           
	spin_wait:                       
	membar.sys;                      
	ld.global.u32 %r11, [%rd29];          
	setp.eq.u32 p0, %r11, 0;           
	@p0 bra spin_wait;               
	st.global.u32 [%rd29], 0;           
	membar.sys;                      
	
	// end inline asm
	ld.u64 	%rd31, [%rd28+2147483680];
	atom.exch.b32 	%r13, [%rd27], 0;
	// begin inline asm
	mov.u64 %rd30, %globaltimer;
	// end inline asm
	sub.s64 	%rd33, %rd30, %rd26;
	add.s64 	%rd34, %rd28, 2147483696;
	atom.add.u64 	%rd35, [%rd34], %rd33;
	st.param.b64 	[func_retval0+0], %rd31;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0002    // -- Begin function _bpf_helper_ext_0002
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0002(
	.param .b64 _bpf_helper_ext_0002_param_0,
	.param .b64 _bpf_helper_ext_0002_param_1,
	.param .b64 _bpf_helper_ext_0002_param_2,
	.param .b64 _bpf_helper_ext_0002_param_3,
	.param .b64 _bpf_helper_ext_0002_param_4
)                                       // @_bpf_helper_ext_0002
{
	.reg .pred 	%p<12>;
	.reg .b16 	%rs<11>;
	.reg .b32 	%r<28>;
	.reg .b64 	%rd<64>;

// %bb.0:
	ld.param.u64 	%rd28, [_bpf_helper_ext_0002_param_0];
	ld.const.u64 	%rd50, [constData];
	shr.u64 	%rd3, %rd28, 32;
	shl.b64 	%rd32, %rd3, 4;
	mov.u64 	%rd33, map_info;
	add.s64 	%rd34, %rd33, %rd32;
	ld.const.u32 	%r11, [%rd34+4];
	setp.lt.s32 	%p1, %r11, 1;
	@%p1 bra 	$L__BB4_7;
// %bb.1:
	ld.param.u64 	%rd29, [_bpf_helper_ext_0002_param_1];
	cvt.u64.u32 	%rd4, %r11;
	cvt.u32.u64 	%r13, %rd4;
	and.b32  	%r25, %r13, 3;
	setp.lt.u32 	%p2, %r13, 4;
	mov.u32 	%r24, 0;
	@%p2 bra 	$L__BB4_4;
// %bb.2:
	add.s64 	%rd2, %rd50, 24;
	and.b64  	%rd5, %rd4, 4294967292;
	add.s64 	%rd6, %rd29, 3;
	mov.u64 	%rd58, 0;
	cvt.u32.u64 	%r14, %rd5;
$L__BB4_3:                              // =>This Inner Loop Header: Depth=1
	add.s64 	%rd36, %rd6, %rd58;
	ld.u8 	%rs1, [%rd36+-3];
	add.s64 	%rd37, %rd2, %rd58;
	st.u8 	[%rd37], %rs1;
	ld.u8 	%rs2, [%rd36+-2];
	st.u8 	[%rd37+1], %rs2;
	ld.u8 	%rs3, [%rd36+-1];
	st.u8 	[%rd37+2], %rs3;
	ld.u8 	%rs4, [%rd36];
	st.u8 	[%rd37+3], %rs4;
	add.s64 	%rd58, %rd58, 4;
	cvt.u32.u64 	%r24, %rd58;
	setp.ne.s32 	%p3, %r14, %r24;
	@%p3 bra 	$L__BB4_3;
$L__BB4_4:
	setp.eq.s32 	%p4, %r25, 0;
	@%p4 bra 	$L__BB4_7;
// %bb.5:
	cvt.u64.u32 	%rd38, %r24;
	add.s64 	%rd39, %rd38, %rd50;
	add.s64 	%rd60, %rd39, 24;
	add.s64 	%rd59, %rd29, %rd38;
$L__BB4_6:                              // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	ld.u8 	%rs5, [%rd59];
	st.u8 	[%rd60], %rs5;
	add.s64 	%rd60, %rd60, 1;
	add.s64 	%rd59, %rd59, 1;
	add.s32 	%r25, %r25, -1;
	setp.ne.s32 	%p5, %r25, 0;
	@%p5 bra 	$L__BB4_6;
$L__BB4_7:
	ld.param.u64 	%rd31, [_bpf_helper_ext_0002_param_3];
	ld.const.u32 	%r15, [%rd34+8];
	setp.lt.s32 	%p6, %r15, 1;
	@%p6 bra 	$L__BB4_14;
// %bb.8:
	ld.param.u64 	%rd30, [_bpf_helper_ext_0002_param_2];
	mov.u32 	%r26, 0;
	cvt.u64.u32 	%rd16, %r15;
	cvt.u32.u64 	%r17, %rd16;
	and.b32  	%r27, %r17, 3;
	setp.lt.u32 	%p7, %r17, 4;
	@%p7 bra 	$L__BB4_11;
// %bb.9:
	add.s64 	%rd15, %rd50, 1073741848;
	and.b64  	%rd17, %rd16, 4294967292;
	add.s64 	%rd18, %rd30, 3;
	mov.u64 	%rd61, 0;
	cvt.u32.u64 	%r18, %rd17;
$L__BB4_10:                             // =>This Inner Loop Header: Depth=1
	add.s64 	%rd44, %rd18, %rd61;
	ld.u8 	%rs6, [%rd44+-3];
	add.s64 	%rd45, %rd15, %rd61;
	st.u8 	[%rd45], %rs6;
	ld.u8 	%rs7, [%rd44+-2];
	st.u8 	[%rd45+1], %rs7;
	ld.u8 	%rs8, [%rd44+-1];
	st.u8 	[%rd45+2], %rs8;
	ld.u8 	%rs9, [%rd44];
	st.u8 	[%rd45+3], %rs9;
	add.s64 	%rd61, %rd61, 4;
	cvt.u32.u64 	%r26, %rd61;
	setp.ne.s32 	%p8, %r18, %r26;
	@%p8 bra 	$L__BB4_10;
$L__BB4_11:
	setp.eq.s32 	%p9, %r27, 0;
	@%p9 bra 	$L__BB4_14;
// %bb.12:
	cvt.u64.u32 	%rd46, %r26;
	add.s64 	%rd47, %rd46, %rd50;
	add.s64 	%rd63, %rd47, 1073741848;
	add.s64 	%rd62, %rd30, %rd46;
$L__BB4_13:                             // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	ld.u8 	%rs10, [%rd62];
	st.u8 	[%rd63], %rs10;
	add.s64 	%rd63, %rd63, 1;
	add.s64 	%rd62, %rd62, 1;
	add.s32 	%r27, %r27, -1;
	setp.ne.s32 	%p10, %r27, 0;
	@%p10 bra 	$L__BB4_13;
$L__BB4_14:
	st.u64 	[%rd50+2147483672], %rd31;
	// begin inline asm
	mov.u64 %rd48, %globaltimer;
	// end inline asm
	add.s64 	%rd49, %rd50, 8;
$L__BB4_15:                             // =>This Inner Loop Header: Depth=1
	atom.cas.b32 	%r19, [%rd49], 0, 1;
	setp.eq.s32 	%p11, %r19, 1;
	@%p11 bra 	$L__BB4_15;
// %bb.16:
	mov.u32 	%r21, 2;
	st.u32 	[%rd50+12], %r21;
	st.u64 	[%rd50+16], %rd28;
	add.s64 	%rd51, %rd50, 4;
	mov.u32 	%r20, 42;
	// begin inline asm
	.reg .pred p0;                   
	membar.sys;                      
	st.global.u32 [%rd50], 1;           
	spin_wait:                       
	membar.sys;                      
	ld.global.u32 %r20, [%rd51];          
	setp.eq.u32 p0, %r20, 0;           
	@p0 bra spin_wait;               
	st.global.u32 [%rd51], 0;           
	membar.sys;                      
	
	// end inline asm
	ld.s32 	%rd53, [%rd50+2147483680];
	atom.exch.b32 	%r22, [%rd49], 0;
	// begin inline asm
	mov.u64 %rd52, %globaltimer;
	// end inline asm
	sub.s64 	%rd55, %rd52, %rd48;
	add.s64 	%rd56, %rd50, 2147483704;
	atom.add.u64 	%rd57, [%rd56], %rd55;
	st.param.b64 	[func_retval0+0], %rd53;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0003    // -- Begin function _bpf_helper_ext_0003
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0003(
	.param .b64 _bpf_helper_ext_0003_param_0,
	.param .b64 _bpf_helper_ext_0003_param_1,
	.param .b64 _bpf_helper_ext_0003_param_2,
	.param .b64 _bpf_helper_ext_0003_param_3,
	.param .b64 _bpf_helper_ext_0003_param_4
)                                       // @_bpf_helper_ext_0003
{
	.reg .pred 	%p<7>;
	.reg .b16 	%rs<6>;
	.reg .b32 	%r<16>;
	.reg .b64 	%rd<39>;

// %bb.0:
	ld.param.u64 	%rd15, [_bpf_helper_ext_0003_param_0];
	ld.const.u64 	%rd28, [constData];
	shr.u64 	%rd17, %rd15, 28;
	and.b64  	%rd18, %rd17, 68719476720;
	mov.u64 	%rd19, map_info;
	add.s64 	%rd20, %rd19, %rd18;
	ld.const.u32 	%r6, [%rd20+4];
	setp.lt.s32 	%p1, %r6, 1;
	@%p1 bra 	$L__BB5_7;
// %bb.1:
	ld.param.u64 	%rd16, [_bpf_helper_ext_0003_param_1];
	cvt.u64.u32 	%rd3, %r6;
	cvt.u32.u64 	%r8, %rd3;
	and.b32  	%r15, %r8, 3;
	setp.lt.u32 	%p2, %r8, 4;
	mov.u32 	%r14, 0;
	@%p2 bra 	$L__BB5_4;
// %bb.2:
	add.s64 	%rd2, %rd28, 24;
	and.b64  	%rd4, %rd3, 4294967292;
	add.s64 	%rd5, %rd16, 3;
	mov.u64 	%rd36, 0;
	cvt.u32.u64 	%r9, %rd4;
$L__BB5_3:                              // =>This Inner Loop Header: Depth=1
	add.s64 	%rd22, %rd5, %rd36;
	ld.u8 	%rs1, [%rd22+-3];
	add.s64 	%rd23, %rd2, %rd36;
	st.u8 	[%rd23], %rs1;
	ld.u8 	%rs2, [%rd22+-2];
	st.u8 	[%rd23+1], %rs2;
	ld.u8 	%rs3, [%rd22+-1];
	st.u8 	[%rd23+2], %rs3;
	ld.u8 	%rs4, [%rd22];
	st.u8 	[%rd23+3], %rs4;
	add.s64 	%rd36, %rd36, 4;
	cvt.u32.u64 	%r14, %rd36;
	setp.ne.s32 	%p3, %r9, %r14;
	@%p3 bra 	$L__BB5_3;
$L__BB5_4:
	setp.eq.s32 	%p4, %r15, 0;
	@%p4 bra 	$L__BB5_7;
// %bb.5:
	cvt.u64.u32 	%rd24, %r14;
	add.s64 	%rd25, %rd24, %rd28;
	add.s64 	%rd38, %rd25, 24;
	add.s64 	%rd37, %rd16, %rd24;
$L__BB5_6:                              // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	ld.u8 	%rs5, [%rd37];
	st.u8 	[%rd38], %rs5;
	add.s64 	%rd38, %rd38, 1;
	add.s64 	%rd37, %rd37, 1;
	add.s32 	%r15, %r15, -1;
	setp.ne.s32 	%p5, %r15, 0;
	@%p5 bra 	$L__BB5_6;
$L__BB5_7:
	// begin inline asm
	mov.u64 %rd26, %globaltimer;
	// end inline asm
	add.s64 	%rd27, %rd28, 8;
$L__BB5_8:                              // =>This Inner Loop Header: Depth=1
	atom.cas.b32 	%r10, [%rd27], 0, 1;
	setp.eq.s32 	%p6, %r10, 1;
	@%p6 bra 	$L__BB5_8;
// %bb.9:
	mov.u32 	%r12, 3;
	st.u32 	[%rd28+12], %r12;
	st.u64 	[%rd28+16], %rd15;
	add.s64 	%rd29, %rd28, 4;
	mov.u32 	%r11, 42;
	// begin inline asm
	.reg .pred p0;                   
	membar.sys;                      
	st.global.u32 [%rd28], 1;           
	spin_wait:                       
	membar.sys;                      
	ld.global.u32 %r11, [%rd29];          
	setp.eq.u32 p0, %r11, 0;           
	@p0 bra spin_wait;               
	st.global.u32 [%rd29], 0;           
	membar.sys;                      
	
	// end inline asm
	ld.s32 	%rd31, [%rd28+2147483680];
	atom.exch.b32 	%r13, [%rd27], 0;
	// begin inline asm
	mov.u64 %rd30, %globaltimer;
	// end inline asm
	sub.s64 	%rd33, %rd30, %rd26;
	add.s64 	%rd34, %rd28, 2147483712;
	atom.add.u64 	%rd35, [%rd34], %rd33;
	st.param.b64 	[func_retval0+0], %rd31;
	ret;
                                        // -- End function
}
	// .globl	_request_probe          // -- Begin function _request_probe
.visible .func _request_probe()         // @_request_probe
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<9>;

// %bb.0:
	ld.const.u64 	%rd4, [constData];
	// begin inline asm
	mov.u64 %rd2, %globaltimer;
	// end inline asm
	add.s64 	%rd3, %rd4, 8;
$L__BB6_1:                              // =>This Inner Loop Header: Depth=1
	atom.cas.b32 	%r1, [%rd3], 0, 1;
	setp.eq.s32 	%p1, %r1, 1;
	@%p1 bra 	$L__BB6_1;
// %bb.2:
	mov.u32 	%r3, 1000;
	st.u32 	[%rd4+12], %r3;
	mov.u64 	%rd7, 0;
	st.u64 	[%rd4+16], %rd7;
	add.s64 	%rd5, %rd4, 4;
	mov.u32 	%r2, 42;
	// begin inline asm
	.reg .pred p0;                   
	membar.sys;                      
	st.global.u32 [%rd4], 1;           
	spin_wait:                       
	membar.sys;                      
	ld.global.u32 %r2, [%rd5];          
	setp.eq.u32 p0, %r2, 0;           
	@p0 bra spin_wait;               
	st.global.u32 [%rd5], 0;           
	membar.sys;                      
	
	// end inline asm
	atom.exch.b32 	%r4, [%rd3], 0;
	// begin inline asm
	mov.u64 %rd6, %globaltimer;
	// end inline asm
	ret;
                                        // -- End function
}
	// .globl	vprintf_mocked          // -- Begin function vprintf_mocked
.visible .func  (.param .b32 func_retval0) vprintf_mocked(
	.param .b64 vprintf_mocked_param_0,
	.param .b64 vprintf_mocked_param_1
)                                       // @vprintf_mocked
{
	.reg .b32 	%r<2>;

// %bb.0:
	{ // callseq 0, 0
	.reg .b32 temp_param_reg;
	call.uni 
	_request_probe, 
	(
	);
	} // callseq 0
	mov.u32 	%r1, 0;
	st.param.b32 	[func_retval0+0], %r1;
	ret;
                                        // -- End function
}
	// .globl	probe_demo              // -- Begin function probe_demo
.visible .entry probe_demo(
	.param .u64 probe_demo_param_0,
	.param .u32 probe_demo_param_1,
	.param .u64 probe_demo_param_2
)                                       // @probe_demo
{
	.local .align 8 .b8 	__local_depot8[8];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<2>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<13>;

// %bb.0:
	mov.u64 	%SPL, __local_depot8;
	cvta.local.u64 	%SP, %SPL;
	ld.param.u32 	%r1, [probe_demo_param_1];
	setp.lt.s32 	%p1, %r1, 1;
	@%p1 bra 	$L__BB8_2;
// %bb.1:
	ld.param.u64 	%rd4, [probe_demo_param_0];
	ld.param.u64 	%rd5, [probe_demo_param_2];
	cvta.to.global.u64 	%rd1, %rd5;
	cvta.to.global.u64 	%rd2, %rd4;
	add.u64 	%rd6, %SP, 0;
	add.u64 	%rd3, %SPL, 0;
	ld.global.u32 	%r2, [%rd2];
	cvt.s64.s32 	%rd7, %r2;
	ld.global.u64 	%rd8, [%rd1];
	add.s64 	%rd9, %rd8, %rd7;
	st.global.u64 	[%rd1], %rd9;
	st.local.u32 	[%rd3], %r2;
	mov.u64 	%rd10, _$_str;
	cvta.global.u64 	%rd11, %rd10;
	{ // callseq 1, 0
	.reg .b32 temp_param_reg;
	.param .b64 param0;
	st.param.b64 	[param0+0], %rd11;
	.param .b64 param1;
	st.param.b64 	[param1+0], %rd6;
	.param .b32 retval0;
	call.uni (retval0), 
	vprintf_mocked, 
	(
	param0, 
	param1
	);
	ld.param.b32 	%r3, [retval0+0];
	} // callseq 1
$L__BB8_2:
	ret;
                                        // -- End function
}
)";

#endif
