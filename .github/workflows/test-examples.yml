name: Build and run all integrated tests (examples)

on:
  push:
    branches: "*"
  pull_request: 
    branches: "*"

jobs: 
  build-runtime:
    strategy:
      matrix:
        enable_jit:
          - true
          - false
        runs-on-container:
          - image: ubuntu:22.04
            compiler: CC=gcc-12 CXX=g++-12
            name: ubuntu
          - image: fedora:39
            compiler:  
            name: fedora
    runs-on: ubuntu-22.04
    container: 
      image: ${{matrix.runs-on-container.image}}
      options: --privileged
    steps:
      - name: Install dependencies (Ubuntu)
        if: startsWith(matrix.runs-on-container.name,'ubuntu')
        run: | 
          apt-get update
          apt-get install -y binutils-dev libboost1.74-all-dev libelf-dev zlib1g-dev libyaml-cpp-dev gcc-12 g++-12 llvm git make cmake pkg-config clang llvm-15-dev
      - name: Install dependencies (Fedora)
        if: startsWith(matrix.runs-on-container.name,'fedora')
        run: | 
          dnf install -y make gcc g++ cmake llvm15-devel boost-devel zlib-devel elfutils-libelf-devel pkgconf clang git llvm libubsan llvm15-devel
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      - name: Build and install runtime (with llvm-jit and ubuntu)
        if: ${{matrix.enable_jit && startsWith(matrix.runs-on-container.name,'ubuntu')}}
        env:
          LLVM_ROOT: /usr/lib/llvm-15
        run: |
          ${{matrix.runs-on-container.compiler}} make release-with-llvm-jit -j
      - name: Build and install runtime (with llvm-jit and fedora)
        if: ${{matrix.enable_jit && startsWith(matrix.runs-on-container.name,'fedora')}}
        env:
          LLVM_ROOT: /usr/lib64/llvm15
        run: |
          ${{matrix.runs-on-container.compiler}} make release-with-llvm-jit -j
      - name: Build and install runtime (without llvm-jit)
        if: ${{!matrix.enable_jit}}
        run: |
          ${{matrix.runs-on-container.compiler}} make release -j
      - name: Upload build results (without jit)
        uses: actions/upload-artifact@v3
        if: ${{!matrix.enable_jit}}
        with:
          name: runtime-package-no-jit-${{matrix.runs-on-container.name}}
          path: |
            ~/.bpftime
      - name: Upload build results (with jit)
        uses: actions/upload-artifact@v3
        if: ${{matrix.enable_jit}}
        with:
          name: runtime-package-jit-${{matrix.runs-on-container.name}}
          path: |
            ~/.bpftime
  build-and-test:
    runs-on: ubuntu-22.04
    needs: [build-runtime]
    container: 
      image: ${{matrix.runs-on-container.image}}
      options: --privileged -v /sys/kernel/debug/:/sys/kernel/debug:rw -v /sys/kernel/tracing:/sys/kernel/tracing:rw
    strategy:
      fail-fast: true
      matrix:
        runs-on-container:
          - image: ubuntu:22.04
            name: ubuntu
          - image: fedora:39
            name: fedora
        enable_jit:
          - true
          - false
        examples: 
          - path: libbpf-tools/opensnoop
            executable: ./opensnoop
            victim: ./victim
            syscall_trace: true
            expected_str: "   0 test.txt"
          - path: libbpf-tools/statsnoop
            executable: ./statsnoop
            victim: ./victim
            syscall_trace: true
            expected_str: "victim               0    0    /sys" 
          - path: malloc
            executable: ./malloc
            victim: ./victim
            syscall_trace: false
            expected_str: "malloc calls: "
          - path: minimal
            executable: ./uprobe
            victim: ./victim
            syscall_trace: false
            expected_str: ""
          - path: opensnoop
            executable: ./opensnoop
            victim: ./victim
            syscall_trace: true
            expected_str: "   0 test.txt"
          - path: sslsniff
            executable: ./sslsniff
            victim: /bin/wget https://www.google.com
            syscall_trace: false
            expected_str: "----- DATA -----"
          - path: libbpf-tools/bashreadline
            executable: ./readline
            victim: /bin/bash
            syscall_trace: false
            expected_str: "info"
          - path: libbpf-tools/syscount
            executable: ./syscount
            victim: /bin/bash
            syscall_trace: false
            expected_str: "info"
          - path: libbpf-tools/funclatency
            executable: ./funclatency -i 1 ./victim:plus
            victim: ./victim
            syscall_trace: false
            expected_str: ": 1"
          - path: libbpf-tools/mountsnoop
            executable: ./mountsnoop
            victim: ./victim
            syscall_trace: true
            expected_str:  mount(
          - path: libbpf-tools/sigsnoop
            executable: ./sigsnoop
            victim: ./victim
            syscall_trace: true
            expected_str: "victim           0         -1      0"
          - path: tailcall_minimal
            executable: ./tailcall_minimal
            victim: ./victim
            syscall_trace: false
            expected_str: "See /sys/kernel/debug/tracing/trace_pipe for output (15)"
          - path: usdt_minimal
            executable: ./usdt_minimal
            victim: ./victim
            syscall_trace: false
            expected_str: "bpf:"

    steps:
      - name: Download prebuilt runtime (with jit)
        if: ${{matrix.enable_jit}}
        uses: actions/download-artifact@v3
        with:
          name: runtime-package-jit-${{matrix.runs-on-container.name}}
          path: ~/.bpftime
      - name: Download prebuilt runtime (without jit)
        if: ${{!matrix.enable_jit}}
        uses: actions/download-artifact@v3
        with:
          name: runtime-package-no-jit-${{matrix.runs-on-container.name}}
          path: ~/.bpftime
  
      - name: Set permissions
        run: |
          chmod +x ~/.bpftime/*
      - name: Show downloaded artifacts
        run: |
          ls ~/.bpftime
      - name: Install dependencies (Ubuntu)
        if: startsWith(matrix.runs-on-container.name,'ubuntu')
        run: |
          apt-get update -y
          apt-get install -y zlib1g-dev libelf-dev llvm systemtap-sdt-dev python3 git make cmake g++ gcc clang wget
          mkdir /mnt/ramdisk
      - name: Install dependencies (Fedora)
        if: startsWith(matrix.runs-on-container.name,'fedora')
        run: |
          dnf install -y zlib-devel elfutils-libelf-devel llvm systemtap-sdt-devel python3 git make cmake gcc gcc-c++ clang wget
          mkdir /mnt/ramdisk
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      # - name: Mount debugfs
      #   run: 
      #     mount debugfs -t debugfs /sys/kernel/debug
      - name: Build test assets
        run: |
          make -C example/${{matrix.examples.path}} -j
      - name: Test CLI - show help
        run: |
          export PATH=$PATH:~/.bpftime
          bpftime --help
      - name: Test CLI - attach by running (syscall_trace)
        if: matrix.examples.syscall_trace
        shell: bash
        run: |
          ROOT=$(pwd)
          cd example/${{matrix.examples.path}}
          python3 $ROOT/.github/script/run_example.py "${{matrix.examples.executable}}" "${{matrix.examples.victim}}" "${{matrix.examples.expected_str}}" "/github/home/.bpftime/bpftime -i /github/home/.bpftime" 1
      - name: Test CLI - attach by running (uprobe)
        if: '!matrix.examples.syscall_trace'
        shell: bash
        run: |
          ROOT=$(pwd)
          cd example/${{matrix.examples.path}}
          python3 $ROOT/.github/script/run_example.py "${{matrix.examples.executable}}" "${{matrix.examples.victim}}" "${{matrix.examples.expected_str}}" "/github/home/.bpftime/bpftime -i /github/home/.bpftime" 0
