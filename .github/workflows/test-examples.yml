name: BPFtime Syscall Tracing (Multi-Step Load/Start) Debug Test v3

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]
  workflow_dispatch: # Enable manual trigger

env:
  BPFTIME_VM_NAME: llvm
  SPDLOG_LEVEL: debug # Keep debug level
  BPFTIME_LOG_OUTPUT: console
  BPFTIME_SHARED_MEMORY_PATH: /dev/shm # Consistent SHM path
  # Log file paths using relative path from workspace root
  SERVER_LOG: logs/bpftime_server.log
  CLIENT_LOG: logs/bpftime_client.log
  CLIENT_STRACE_LOG: logs/bpftime_client_strace.log

jobs:
  syscall-tracing-load-start-test:
    runs-on: ubuntu-22.04
    container:
      image: "manjusakalza/bpftime-base-image:ubuntu-2204"
      options: "--privileged -v /sys/kernel/debug:/sys/kernel/debug:rw -v /sys/kernel/tracing:/sys/kernel/tracing:rw -v /dev/shm:/dev/shm:rw -v /tmp:/tmp:rw -v /run/shm:/run/shm:rw"

    steps:
      - name: Checkout code (Default Path)
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: System setup and kernel headers
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            lcov tree strace gdb sudo libc6-dev bpftrace \
            linux-headers-generic linux-tools-generic \
            linux-headers-$(uname -r) \
            libelf-dev procps strace
          echo "==== System Information ===="
          uname -a && cat /etc/os-release
          echo "==== bpftrace version ===="
          which bpftrace && bpftrace --version || echo "bpftrace not found"
          mkdir -p logs

      - name: Build and install runtime (Original CMake approach)
        run: |
          INSTALL_DIR="$HOME/.bpftime"
          echo "Building bpftime, installing to $INSTALL_DIR"
          echo "--- Checking contents of current directory ($PWD) ---"; ls -la; echo "--- End checking contents ---"
          cmake -Bbuild -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo \
            -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR \
            -DBPFTIME_LLVM_JIT=1 \
            -DBUILD_BPFTIME_DAEMON=1 \
            -DBUILD_AGENT=1 \
            -DCMAKE_CXX_FLAGS="-DDEFAULT_LOGGER_OUTPUT_PATH='\"console\"'"
          cmake --build build --config RelWithDebInfo --target install -j$(nproc)
          echo "Installed files:"; ls -la $INSTALL_DIR/
          ls -l $INSTALL_DIR/libbpftime-agent.so || { echo "ERROR: libbpftime-agent.so not found after install!"; exit 1; }
          chmod +x $INSTALL_DIR/* || echo "Warning: Could not chmod installed files"
          echo "$INSTALL_DIR" >> $GITHUB_PATH
          echo "BPFTIME_INSTALL_DIR=$INSTALL_DIR" >> $GITHUB_ENV
          echo "HOME_DIR=$HOME" >> $GITHUB_ENV
          echo "Checking dependencies for libbpftime-agent.so:"; ldd "$INSTALL_DIR/libbpftime-agent.so" || echo "WARNING: ldd command failed"

      - name: Start BPFTIME Server (Background)
        id: start_server
        run: |
          set -x
          echo "==== Starting BPFTIME Server in background ===="
          BPFTIME_BIN="$BPFTIME_INSTALL_DIR/bpftime"
          BPFTRACE_SCRIPT='tracepoint:syscalls:sys_enter_openat { printf("SERVER_TRACE (openat): %s %s\n", comm, str(args->filename)); }'
          sudo -E "$BPFTIME_BIN" load bpftrace -e "$BPFTRACE_SCRIPT" > "$SERVER_LOG" 2>&1 &
          SERVER_PID=$!
          echo "Server started in background with PID: $SERVER_PID"
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          echo "Waiting for server to initialize (10s)..."; sleep 10
          if ! ps -p $SERVER_PID > /dev/null; then
            echo "ERROR: Server process $SERVER_PID did not start or died!"
            echo "--- Server Log ---"; cat "$SERVER_LOG" || echo "log not found"; echo "--- End Log ---"
            exit 1
          else
            echo "Server process $SERVER_PID confirmed running."
          fi
          ls -l "$BPFTIME_SHARED_MEMORY_PATH/bpftime_maps_shm" || echo "WARNING: SHM file not found yet."

      - name: Run BPFTIME Client
        id: run_client
        run: |
          set -x
          echo "==== Running BPFTIME Client ===="
          if [ -z "$SERVER_PID" ]; then echo "ERROR: SERVER_PID env var not set!"; exit 1; fi
          echo "Server PID from previous step: $SERVER_PID"
          if ! ps -p $SERVER_PID > /dev/null; then
             echo "ERROR: Server process $SERVER_PID is no longer running before client start!"
             echo "--- Server Log ---"; cat "$SERVER_LOG" || echo "log not found"; echo "--- End Log ---"
             exit 1
          fi

          BPFTIME_BIN="$BPFTIME_INSTALL_DIR/bpftime"
          CLIENT_COMMAND="/bin/echo BPFTIME_AGENT_TEST_SUCCESS" # Simplified command

          echo "Running client command with strace: '$CLIENT_COMMAND'..."
          export BPFTIME_DEBUG=1

          # --- MODIFICATION START ---
          # Execute client command but capture exit code immediately
          sudo -E env BPFTIME_DEBUG=1 strace -f -v -s 256 -o "$CLIENT_STRACE_LOG" "$BPFTIME_BIN" start -s "$CLIENT_COMMAND" > "$CLIENT_LOG" 2>&1
          _client_exit_code=$? # Capture exit code right away
          echo "Client command finished with raw exit code: $_client_exit_code" # Log the captured code

          # Now export the captured exit code, regardless of its value
          echo "CLIENT_EXIT_CODE=$_client_exit_code" >> $GITHUB_ENV
          # --- MODIFICATION END ---

          # FORCE PRINT CLIENT LOGS IN THIS STEP
          echo ""; echo "#############################################"
          echo "### CLIENT LOG (immediately after run) ($CLIENT_LOG) ###"; echo "#############################################"
          cat "$CLIENT_LOG" || echo "<<< Client log file not found or empty >>>"; echo "#############################################"; echo ""
          echo "#############################################"; echo "### CLIENT STRACE LOG (Tail) (immediately after run) ($CLIENT_STRACE_LOG) ###"
          echo "#############################################"; tail -n 200 "$CLIENT_STRACE_LOG" || echo "<<< Client strace log file not found or empty >>>"
          echo "#############################################"; echo ""

          # Optional: Decide if this step should *fail* the build based on the code
          # If you want the whole job to stop here if client fails, uncomment the next line
          # [ "$_client_exit_code" -eq 0 ] || exit $_client_exit_code
          # Currently, we let the final step perform the analysis.

      - name: Stop Server and Analyze Results
        if: always() # Ensure cleanup and analysis
        run: |
          set -x
          echo "==== Stop Server and Analyze Results ===="
          SERVER_PID_TO_KILL=${{ env.SERVER_PID }}
          # Retrieve the exit code set by the previous step
          # Use parameter expansion to provide a default (e.g., 99) if it's somehow still empty
          CLIENT_FINAL_EXIT_CODE=${CLIENT_EXIT_CODE:-99}

          # Give server a moment
          sleep 2

          echo "--- Final Server Log ($SERVER_LOG) ---"
          cat "$SERVER_LOG" || echo "<<< Server log file not found or empty >>>"
          echo "--- End Final Server Log ---"

          echo "Attempting to stop server process PID $SERVER_PID_TO_KILL..."
          if [ -n "$SERVER_PID_TO_KILL" ]; then
            if ps -p $SERVER_PID_TO_KILL > /dev/null; then
               sudo kill $SERVER_PID_TO_KILL 2>/dev/null || echo "Kill SIGTERM failed"
               sleep 2
               if ps -p $SERVER_PID_TO_KILL > /dev/null; then
                   echo "WARNING: Server still running, sending SIGKILL."
                   sudo kill -9 $SERVER_PID_TO_KILL 2>/dev/null || true
               else echo "Server terminated successfully."; fi
            else echo "Server process $SERVER_PID_TO_KILL was not running before kill."; fi
          else echo "No Server PID found to kill."; fi

          echo "--- Final Analysis ---"
          echo "Analyzing Client Exit Code: '$CLIENT_FINAL_EXIT_CODE'" # Log the code being analyzed

          # Now the comparison should be safe because CLIENT_FINAL_EXIT_CODE will have a value
          if [ "$CLIENT_FINAL_EXIT_CODE" = "0" ]; then
              echo ">>> Client command SUCCEEDED (Exit Code 0). Checking output... <<<"
              if grep -q "BPFTIME_AGENT_TEST_SUCCESS" "$CLIENT_LOG"; then
                  echo ">>> SUCCESS: Simplified client command ran and produced expected output in client log. <<<"
                  exit 0
              else
                  echo ">>> FAILURE: Client command ran (Exit 0) but expected output 'BPFTIME_AGENT_TEST_SUCCESS' was NOT found in client log ($CLIENT_LOG). <<<"
                  exit 1
              fi
          elif [ "$CLIENT_FINAL_EXIT_CODE" = "99" ]; then
              # This means the variable was empty in the previous step (shouldn't happen with the fix)
              echo ">>> FAILURE: Client exit code was not captured correctly (default value 99 used). Review 'Run BPFTIME Client' step logs. <<<"
              exit 1
          else
              echo ">>> FAILURE: Client command exited with non-zero code ($CLIENT_FINAL_EXIT_CODE). <<<"
              echo ">>> Examine Client/Strace logs printed in the 'Run BPFTIME Client' step for errors. <<<"
              exit 1
          fi