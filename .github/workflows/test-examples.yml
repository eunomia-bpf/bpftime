name: BPFtime Syscall Tracing (LD_PRELOAD Method)

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]
  workflow_dispatch:

env:
  BPFTIME_VM_NAME: llvm
  SPDLOG_LEVEL: debug
  BPFTIME_LOG_OUTPUT: console
  BPFTIME_SHARED_MEMORY_PATH: /dev/shm
  SERVER_LOG: logs/bpftime_server.log
  CLIENT_LOG: logs/bpftime_client.log
  TRACE_LOG: logs/trace_output.log

jobs:
  syscall-tracing-load-start-test:
    runs-on: ubuntu-22.04
    container:
      image: "manjusakalza/bpftime-base-image:ubuntu-2204"
      options: "--privileged -v /sys/kernel/debug:/sys/kernel/debug:rw -v /sys/kernel/tracing:/sys/kernel/tracing:rw -v /dev/shm:/dev/shm:rw -v /tmp:/tmp:rw -v /run/shm:/run/shm:rw"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: System setup and kernel headers
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            lcov tree strace gdb sudo libc6-dev bpftrace \
            linux-headers-generic linux-tools-generic \
            linux-headers-$(uname -r) \
            libelf-dev procps
          echo "==== System Information ===="; uname -a && cat /etc/os-release
          echo "==== bpftrace version ===="; which bpftrace && bpftrace --version || echo "bpftrace not found"
          mkdir -p logs build
          echo "TEST_DATA_LINE_1_ABC" > build/install_manifest.txt
          echo "TEST_DATA_LINE_2_XYZ" >> build/install_manifest.txt
          echo "Created build/install_manifest.txt:"; cat build/install_manifest.txt

      - name: Build bpftime
        run: |
          echo "Building bpftime with CMake"
          cmake -Bbuild -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo \
            -DBPFTIME_LLVM_JIT=1 \
            -DBUILD_BPFTIME_DAEMON=1 \
            -DBUILD_AGENT=1 \
            -DCMAKE_CXX_FLAGS="-DDEFAULT_LOGGER_OUTPUT_PATH='\"console\"'"
          cmake --build build --config RelWithDebInfo -j$(nproc)
          
          echo "Checking built libraries:"
          ls -la build/runtime/agent/
          ls -la build/runtime/syscall-server/

      - name: Verify syscalls with strace
        run: |
          echo "=== Running strace to verify openat syscalls ==="
          # 使用strace验证cat命令确实使用了openat系统调用
          strace -e openat cat build/install_manifest.txt > /dev/null 2> logs/strace_output.txt
          
          echo "Strace output:"
          cat logs/strace_output.txt
          
          if grep -q "openat.*build/install_manifest.txt" logs/strace_output.txt; then
            echo "✅ CONFIRMED: 'cat build/install_manifest.txt' does call openat syscall"
          else
            echo "❌ ERROR: Could not confirm openat syscall in strace output"
            exit 1
          fi

      - name: Create bpftrace script
        run: |
          # 创建一个简单明确的bpftrace脚本，专注于跟踪openat系统调用
          cat > /tmp/openat_trace.bt << 'EOT'
          #!/usr/bin/env bpftrace
          
          // 跟踪openat系统调用
          tracepoint:syscalls:sys_enter_openat { 
              printf("SERVER_TRACE (openat): %s %s\n", comm, str(args->filename)); 
          }
          EOT
          
          chmod +x /tmp/openat_trace.bt
          echo "Created bpftrace script:"
          cat /tmp/openat_trace.bt

      - name: Test bpftrace script directly
        run: |
          echo "=== Testing bpftrace script directly ==="
          # 直接测试bpftrace脚本是否能正常工作
          timeout 10s bpftrace /tmp/openat_trace.bt > "$TRACE_LOG" 2>&1 &
          BPFTRACE_PID=$!
          sleep 3
          
          # 运行一个简单的cat命令，应该会触发openat系统调用
          cat build/install_manifest.txt > /dev/null
          sleep 2
          
          # 终止bpftrace进程
          kill $BPFTRACE_PID 2>/dev/null || true
          sleep 1
          
          echo "Bpftrace direct test output:"
          cat "$TRACE_LOG"
          
          if grep -q "SERVER_TRACE (openat).*build/install_manifest.txt" "$TRACE_LOG"; then
            echo "✅ CONFIRMED: bpftrace script works correctly when run directly"
          else
            echo "⚠️ WARNING: bpftrace script did not capture expected syscalls when run directly"
            # 这不是致命错误，可能是环境问题
          fi

      - name: Start BPFTIME Server
        id: start_server
        run: |
          echo "=== Starting BPFTIME Server with LD_PRELOAD ==="
          mkdir -p logs
          
          # 使用LD_PRELOAD启动bpftrace
          # 使用script命令确保输出不会被缓冲
          script -c "sudo -E env LD_PRELOAD=$PWD/build/runtime/syscall-server/libbpftime-syscall-server.so bpftrace /tmp/openat_trace.bt" -f "$SERVER_LOG" &
          
          SERVER_PID=$!
          echo "Server started with PID: $SERVER_PID"
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
          echo "Waiting for server to initialize (15s)..."
          sleep 15
          
          # 检查服务器进程是否存活
          if ps -p $SERVER_PID > /dev/null; then
            echo "✅ Server process $SERVER_PID is running"
          else
            echo "❌ ERROR: Server process $SERVER_PID did not start or died!"
            cat "$SERVER_LOG" || echo "Server log not found"
            exit 1
          fi
          
          # 检查服务器日志中是否有"Attaching probe"消息
          if grep -q "Attaching" "$SERVER_LOG"; then
            echo "✅ Server initialized with probe(s) attached"
          else
            echo "⚠️ WARNING: Did not find 'Attaching' message in server log"
          fi
          
          # 检查共享内存文件
          ls -l "$BPFTIME_SHARED_MEMORY_PATH/bpftime_maps_shm" || echo "⚠️ WARNING: SHM file not found"
          
          # 添加明确的标记
          echo "=== BEFORE CLIENT EXECUTION ===" | sudo tee -a "$SERVER_LOG"

      - name: Run BPFTIME Client
        id: run_client
        run: |
          echo "=== Running BPFTIME Client with LD_PRELOAD ==="
          
          # 验证服务器仍在运行
          SERVER_PID_CHECK=${{ env.SERVER_PID }}
          if ! ps -p $SERVER_PID_CHECK > /dev/null; then
            echo "❌ ERROR: Server process is not running!"
            cat "$SERVER_LOG" || echo "Server log not found"
            exit 1
          fi
          
          # 添加明确的标记
          echo "=== CLIENT EXECUTION STARTING ===" | sudo tee -a "$SERVER_LOG"
          
          # 运行客户端命令
          echo "Running cat command with LD_PRELOAD..."
          sudo -E env BPFTIME_DEBUG=1 LD_PRELOAD=$PWD/build/runtime/agent/libbpftime-agent.so \
            cat build/install_manifest.txt | tee "$CLIENT_LOG"
          
          CLIENT_EXIT_CODE=$?
          echo "CLIENT_EXIT_CODE=$CLIENT_EXIT_CODE" >> $GITHUB_ENV
          
          # 确保有足够时间处理系统调用
          sleep 5
          
          # 添加结束标记
          echo "=== CLIENT EXECUTION COMPLETED ===" | sudo tee -a "$SERVER_LOG"
          
          # 运行locale命令，尝试触发locale-archive访问
          echo "Running locale command to trigger locale-archive access..."
          sudo -E env BPFTIME_DEBUG=1 LD_PRELOAD=$PWD/build/runtime/agent/libbpftime-agent.so \
            locale -a > /dev/null
          
          # 再次等待
          sleep 5
          
          # 打印当前服务器日志
          echo "Current server log content:"
          cat "$SERVER_LOG" || echo "Server log not available"

      - name: Check for syscall traces
        run: |
          echo "=== Checking for syscall traces in server log ==="
          
          # 强制刷新文件系统缓冲区
          sync
          
          # 检查服务器日志中是否包含我们期望的系统调用跟踪
          if grep -q "SERVER_TRACE (openat).*build/install_manifest.txt" "$SERVER_LOG"; then
            echo "✅ SUCCESS: Found trace for 'build/install_manifest.txt' in server log"
            INSTALL_MANIFEST_TRACE_FOUND="true"
          else
            echo "❌ FAILURE: Did not find trace for 'build/install_manifest.txt' in server log"
            INSTALL_MANIFEST_TRACE_FOUND="false"
          fi
          
          if grep -q "SERVER_TRACE (openat).*locale-archive" "$SERVER_LOG"; then
            echo "✅ SUCCESS: Found trace for 'locale-archive' in server log"
            LOCALE_ARCHIVE_TRACE_FOUND="true"
          else
            echo "❌ FAILURE: Did not find trace for 'locale-archive' in server log"
            LOCALE_ARCHIVE_TRACE_FOUND="false"
          fi
          
          # 保存结果到环境变量
          echo "INSTALL_MANIFEST_TRACE_FOUND=$INSTALL_MANIFEST_TRACE_FOUND" >> $GITHUB_ENV
          echo "LOCALE_ARCHIVE_TRACE_FOUND=$LOCALE_ARCHIVE_TRACE_FOUND" >> $GITHUB_ENV

      - name: Stop Server and Analyze Results
        if: always()
        run: |
          echo "=== Stop Server and Analyze Results ==="
          SERVER_PID_TO_KILL=${{ env.SERVER_PID }}
          CLIENT_EXIT_CODE=${CLIENT_EXIT_CODE:-99}
          INSTALL_MANIFEST_TRACE_FOUND=${INSTALL_MANIFEST_TRACE_FOUND:-false}
          LOCALE_ARCHIVE_TRACE_FOUND=${LOCALE_ARCHIVE_TRACE_FOUND:-false}
          
          # 停止服务器
          if [ -n "$SERVER_PID_TO_KILL" ] && ps -p $SERVER_PID_TO_KILL > /dev/null; then
            echo "Stopping server process PID $SERVER_PID_TO_KILL..."
            sudo kill -9 $SERVER_PID_TO_KILL 2>/dev/null || echo "Kill failed"
            sleep 2
          fi
          
          # 最终分析
          echo "=== Final Analysis ==="
          
          # 客户端成功标准
          if [ "$CLIENT_EXIT_CODE" = "0" ] && grep -q "TEST_DATA_LINE" "$CLIENT_LOG"; then
            echo "✅ Client executed successfully"
            CLIENT_SUCCESS="true"
          else
            echo "❌ Client execution failed or did not produce expected output"
            CLIENT_SUCCESS="false"
          fi
          
          # 系统调用跟踪成功标准
          if [ "$INSTALL_MANIFEST_TRACE_FOUND" = "true" ] || [ "$LOCALE_ARCHIVE_TRACE_FOUND" = "true" ]; then
            echo "✅ System call tracing is working"
            TRACING_SUCCESS="true"
          else
            echo "❌ System call tracing is NOT working"
            TRACING_SUCCESS="false"
          fi
          
          # 最终结果
          if [ "$CLIENT_SUCCESS" = "true" ] && [ "$TRACING_SUCCESS" = "true" ]; then
            echo "✅ OVERALL SUCCESS: Client ran successfully AND system call tracing is working"
            exit 0
          else
            echo "❌ FAILURE: Test did not meet all success criteria"
            if [ "$CLIENT_SUCCESS" != "true" ]; then
              echo "  - Client execution issues"
            fi
            if [ "$TRACING_SUCCESS" != "true" ]; then
              echo "  - System call tracing not working"
            fi
            exit 1
          fi
