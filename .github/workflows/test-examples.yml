name: BPFtime Syscall Tracing (LD_PRELOAD Method)

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]
  workflow_dispatch:

env:
  BPFTIME_VM_NAME: llvm
  SPDLOG_LEVEL: debug
  BPFTIME_LOG_OUTPUT: console
  BPFTIME_SHARED_MEMORY_PATH: /dev/shm
  SERVER_LOG: logs/bpftime_server.log
  CLIENT_LOG: logs/bpftime_client.log

jobs:
  syscall-tracing-load-start-test:
    runs-on: ubuntu-22.04
    container:
      image: "manjusakalza/bpftime-base-image:ubuntu-2204"
      options: "--privileged -v /sys/kernel/debug:/sys/kernel/debug:rw -v /sys/kernel/tracing:/sys/kernel/tracing:rw -v /dev/shm:/dev/shm:rw -v /tmp:/tmp:rw -v /run/shm:/run/shm:rw"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: System setup and kernel headers
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            lcov tree strace gdb sudo libc6-dev bpftrace \
            linux-headers-generic linux-tools-generic \
            linux-headers-$(uname -r) \
            libelf-dev procps
          echo "==== System Information ===="; uname -a && cat /etc/os-release
          echo "==== bpftrace version ===="; which bpftrace && bpftrace --version || echo "bpftrace not found"
          mkdir -p logs build
          echo "TEST_DATA_LINE_1_ABC" > build/install_manifest.txt
          echo "TEST_DATA_LINE_2_XYZ" >> build/install_manifest.txt
          echo "Created build/install_manifest.txt:"; cat build/install_manifest.txt

      - name: Build bpftime
        run: |
          echo "Building bpftime with CMake"
          cmake -Bbuild -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo \
            -DBPFTIME_LLVM_JIT=1 \
            -DBUILD_BPFTIME_DAEMON=1 \
            -DBUILD_AGENT=1 \
            -DCMAKE_CXX_FLAGS="-DDEFAULT_LOGGER_OUTPUT_PATH='\"console\"'"
          cmake --build build --config RelWithDebInfo -j$(nproc)
          
          # Verify built libraries exist
          echo "Checking built libraries:"
          ls -la build/runtime/agent/
          ls -la build/runtime/syscall-server/
          
          # Check dependencies
          echo "Checking dependencies for libbpftime-agent.so:"
          ldd build/runtime/agent/libbpftime-agent.so || echo "WARNING: ldd command failed for agent"
          
          echo "Checking dependencies for libbpftime-syscall-server.so:"
          ldd build/runtime/syscall-server/libbpftime-syscall-server.so || echo "WARNING: ldd command failed for server"

      - name: Start BPFTIME Server using LD_PRELOAD
        id: start_server
        run: |
          set -x
          echo "==== Starting BPFTIME Server using LD_PRELOAD ===="
          
          # Create bpftrace script file
          echo 'tracepoint:syscalls:sys_enter_openat { printf("SERVER_TRACE (openat): %s %s\n", comm, str(args->filename)); }' > /tmp/openat_trace.bt
          
          # Start server using LD_PRELOAD
          sudo -E env LD_PRELOAD=$PWD/build/runtime/syscall-server/libbpftime-syscall-server.so \
            bpftrace /tmp/openat_trace.bt > "$SERVER_LOG" 2>&1 &
          
          SERVER_PID=$!
          echo "Server started in background with PID: $SERVER_PID"; echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
          echo "Waiting for server to initialize (10s)..."; sleep 10
          
          if ! ps -p $SERVER_PID > /dev/null; then 
            echo "ERROR: Server process $SERVER_PID did not start or died!"
            echo "--- Server Log ---"; cat "$SERVER_LOG" || echo "log not found"
            echo "--- End Log ---"
            exit 1
          else 
            echo "Server process $SERVER_PID confirmed running."
            # Show server log to check for "Attaching 1 probe..."
            echo "--- Initial Server Log ---"
            cat "$SERVER_LOG" || echo "log not found"
            echo "--- End Initial Log ---"
          fi
          
          ls -l "$BPFTIME_SHARED_MEMORY_PATH/bpftime_maps_shm" || echo "WARNING: SHM file not found yet."

      - name: Run BPFTIME Client using LD_PRELOAD
        id: run_client
        run: |
          set -x
          echo "==== Running BPFTIME Client using LD_PRELOAD ===="
          
          if [ -z "$SERVER_PID" ]; then 
            echo "ERROR: SERVER_PID env var not set!"
            exit 1
          fi
          
          echo "Server PID from previous step: $SERVER_PID"
          
          if ! ps -p $SERVER_PID > /dev/null; then 
            echo "ERROR: Server process $SERVER_PID is no longer running!"
            echo "--- Server Log ---"; cat "$SERVER_LOG" || echo "log not found"
            echo "--- End Log ---"
            exit 1
          fi
          
          # Run client using LD_PRELOAD
          echo "Running client command using LD_PRELOAD..."
          
          sudo -E env BPFTIME_DEBUG=1 LD_PRELOAD=$PWD/build/runtime/agent/libbpftime-agent.so \
            cat build/install_manifest.txt > "$CLIENT_LOG" 2>&1
          
          _client_exit_code=$?
          echo "Client command finished with exit code: $_client_exit_code"
          echo "CLIENT_EXIT_CODE=$_client_exit_code" >> $GITHUB_ENV
          
          echo ""; echo "#############################################"
          echo "### CLIENT LOG (immediately after run) ($CLIENT_LOG) ###"
          echo "#############################################"
          cat "$CLIENT_LOG" || echo "<<< Client log file not found or empty >>>"
          echo "#############################################"; echo ""

      - name: Stop Server and Analyze Results
        if: always()
        run: |
          set -x
          echo "==== Stop Server and Analyze Results ===="
          SERVER_PID_TO_KILL=${{ env.SERVER_PID }}
          CLIENT_FINAL_EXIT_CODE=${CLIENT_EXIT_CODE:-99}

          sleep 2

          echo "--- Final Server Log ($SERVER_LOG) ---"
          cat "$SERVER_LOG" || echo "<<< Server log file not found or empty >>>"
          echo "--- End Final Server Log ---"
          
          echo "--- Final Client Log ($CLIENT_LOG) ---"
          cat "$CLIENT_LOG" || echo "<<< Client log file not found or empty >>>"
          echo "--- End Final Client Log ---"

          echo "Attempting to stop server process PID $SERVER_PID_TO_KILL..."
          if [ -n "$SERVER_PID_TO_KILL" ]; then
            if ps -p $SERVER_PID_TO_KILL > /dev/null; then
               sudo kill $SERVER_PID_TO_KILL 2>/dev/null || echo "Kill SIGTERM failed"
               sleep 2
               if ps -p $SERVER_PID_TO_KILL > /dev/null; then 
                 echo "WARNING: Server still running, sending SIGKILL."
                 sudo kill -9 $SERVER_PID_TO_KILL 2>/dev/null || true
               else 
                 echo "Server terminated successfully."
               fi
            else 
              echo "Server process $SERVER_PID_TO_KILL was not running before kill."
            fi
          else 
            echo "No Server PID found to kill."
          fi

          echo "--- Final Analysis ---"
          echo "Analyzing Client Exit Code: '$CLIENT_FINAL_EXIT_CODE'"

          # Check server log for traces
          if grep -q "SERVER_TRACE (openat): cat build/install_manifest.txt" "$SERVER_LOG"; then
            echo "SUCCESS: Found expected trace pattern 'cat build/install_manifest.txt' in server log."
            TRACE_SUCCESS=true
          else
            echo "WARNING: Did not find expected trace pattern 'cat build/install_manifest.txt' in server log."
            TRACE_SUCCESS=false
          fi
          
          if grep -q "SERVER_TRACE (openat): cat /usr/lib/locale/locale-archive" "$SERVER_LOG"; then
            echo "SUCCESS: Found expected trace pattern 'cat /usr/lib/locale/locale-archive' in server log."
            LOCALE_TRACE_SUCCESS=true
          else
            echo "WARNING: Did not find expected trace pattern 'cat /usr/lib/locale/locale-archive' in server log."
            LOCALE_TRACE_SUCCESS=false
          fi
          
          # Final verdict
          if [ "$CLIENT_FINAL_EXIT_CODE" = "0" ] && [ "$TRACE_SUCCESS" = "true" ]; then
            echo ">>> OVERALL SUCCESS: Client ran successfully AND server traced the expected syscalls. <<<"
            exit 0
          else
            echo ">>> FAILURE: Test did not meet all success criteria. <<<"
            if [ "$CLIENT_FINAL_EXIT_CODE" != "0" ]; then
              echo "- Client exit code was non-zero: $CLIENT_FINAL_EXIT_CODE"
            fi
            if [ "$TRACE_SUCCESS" != "true" ]; then
              echo "- Expected trace pattern 'cat build/install_manifest.txt' was not found."
            fi
            exit 1
          fi
