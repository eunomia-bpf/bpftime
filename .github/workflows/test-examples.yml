name: BPFtime Syscall Tracing Test

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]
  workflow_dispatch: # Enable manual trigger

env:
  BPFTIME_VM_NAME: llvm
  SPDLOG_LEVEL: error
  
jobs:
  syscall-tracing-test:
    runs-on: ubuntu-22.04
    container:
      image: "manjusakalza/bpftime-base-image:ubuntu-2204"
      # Add proper mounts for accessing kernel debug features and shared memory
      options: "--privileged -v /sys/kernel/debug/:/sys/kernel/debug:rw -v /sys/kernel/tracing:/sys/kernel/tracing:rw -v /dev/shm:/dev/shm:rw"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: System setup and dependencies
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            lcov tree strace gdb sudo libc6-dev bpftrace \
            linux-headers-generic linux-tools-generic \
            linux-headers-$(uname -r) \
            libelf-dev # Needed for bpftrace
          
          # System information for debugging
          echo "==== System Information ===="
          uname -a
          cat /etc/os-release
          
          # Check for bpftrace availability and version
          echo "==== Checking bpftrace availability ===="
          which bpftrace
          bpftrace --version
          
          # Check for tracepoint availability
          echo "==== Checking tracepoint availability ===="
          bpftrace -l 'tracepoint:syscalls:sys_enter_openat' > /dev/null 2>&1 || { echo "openat syscall tracepoint not found"; exit 1; }
          echo "openat syscall tracepoint found."
          
          # Create test file needed for openat syscall
          echo "==== Preparing test directory and files ===="
          mkdir -p build logs
          echo "/root/.bpftime/bpftime_daemon" > build/install_manifest.txt
          echo "/root/.bpftime/bpftimetool" >> build/install_manifest.txt
          echo "/root/.bpftime/libbpftime-agent.so" >> build/install_manifest.txt
          echo "/root/.bpftime/libbpftime-agent-transformer.so" >> build/install_manifest.txt
          echo "/root/.bpftime/libbpftime-syscall-server.so" >> build/install_manifest.txt
          cat build/install_manifest.txt
          
          # Ensure shared memory directories exist
          mkdir -p /dev/shm /tmp/bpftime_shm
          chmod 777 /dev/shm /tmp/bpftime_shm

      - name: Build and install BPFtime
        run: |
          export INSTALL_DIR=$HOME/.bpftime
          echo "Building bpftime, installing to $INSTALL_DIR"
          
          cmake -Bbuild -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo \
            -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR \
            -DBPFTIME_LLVM_JIT=1 \
            -DBUILD_BPFTIME_DAEMON=1 \
            -DCMAKE_CXX_FLAGS="-DDEFAULT_LOGGER_OUTPUT_PATH='\"console\"'" \
            -DBUILD_AGENT=1
          
          cmake --build build --config RelWithDebInfo --target install -j$(nproc)
          
          echo "Installed files:"
          ls -la $INSTALL_DIR/
          
          chmod +x $INSTALL_DIR/*
          
          # Add bpftime to PATH
          export PATH=$PATH:$INSTALL_DIR
          echo "PATH=$PATH" >> $GITHUB_ENV
          echo "BPFTIME_INSTALL_DIR=$INSTALL_DIR" >> $GITHUB_ENV
          echo "HOME_DIR=$HOME" >> $GITHUB_ENV
      
      - name: Create syscall trace test scripts
        run: |
          cat > syscall_test.sh << 'EOF'
          #!/bin/bash
          set -e
          
          export PATH=$PATH:$HOME/.bpftime
          
          # Create log directory
          mkdir -p logs
          
          # Create named pipe for communication between server and client
          PIPE_PATH="/tmp/bpftime_uprobe_pipe"
          rm -f "$PIPE_PATH"
          mkfifo "$PIPE_PATH" || { echo "ERROR: Failed to create named pipe"; exit 1; }
          
          # Start bpftime server with bpftrace to monitor syscalls
          echo "Starting bpftrace syscall monitoring server..."
          SPDLOG_LEVEL=error sudo $HOME/.bpftime/bpftime load bpftrace -e 'tracepoint:syscalls:sys_enter_openat { printf("%s %s\n", comm, str(args->filename)); }' > logs/server.log 2>&1 &
          SERVER_PID=$!
          
          # Wait for server to initialize
          sleep 3
          
          # Check if server is still running
          if ! ps -p $SERVER_PID > /dev/null; then
            echo "ERROR: bpftime server failed to start or crashed"
            cat logs/server.log
            exit 1
          fi
          
          # Start client process to generate openat syscalls
          echo "Starting client process with bpftime..."
          SPDLOG_LEVEL=error sudo $HOME/.bpftime/bpftime start -s cat build/install_manifest.txt > logs/client.log 2>&1
          CLIENT_EXIT=$?
          
          # Give server time to process events
          sleep 2
          
          # Stop server
          echo "Stopping server..."
          kill $SERVER_PID || true
          wait $SERVER_PID 2>/dev/null || true
          
          # Clean up pipe
          rm -f "$PIPE_PATH"
          
          # Display logs
          echo "=== Server Log ==="
          cat logs/server.log
          
          echo "=== Client Log ==="
          cat logs/client.log
          
          # Check for success: verify that cat's openat syscall for install_manifest.txt was recorded
          if grep -q "cat build/install_manifest.txt" logs/server.log; then
            echo "SUCCESS: Syscall tracing test passed - detected 'cat build/install_manifest.txt' syscall"
            exit 0
          else
            echo "FAILURE: Syscall tracing test failed - couldn't detect expected syscall"
            exit 1
          fi
          EOF
          chmod +x syscall_test.sh
          
          # Create a more direct test script as fallback
          cat > simple_test.sh << 'EOF'
          #!/bin/bash
          set -e
          
          export PATH=$PATH:$HOME/.bpftime
          mkdir -p logs
          
          echo "==== Testing basic BPFtime syscall tracing ===="
          
          # First test - verify that bpftrace works without bpftime
          echo "Running regular bpftrace to verify system capability..."
          timeout -k 5s 3s bpftrace -e 'tracepoint:syscalls:sys_enter_openat { printf("%s %s\n", comm, str(args->filename)); }' > logs/direct_trace.log 2>&1 &
          DIRECT_PID=$!
          sleep 1
          cat build/install_manifest.txt > /dev/null
          sleep 1
          kill $DIRECT_PID 2>/dev/null || true
          
          echo "Regular bpftrace output:"
          cat logs/direct_trace.log
          
          # Test with BPFtime server and agent
          echo "Starting bpftime syscall server..."
          $HOME/.bpftime/bpftime load bpftrace -e 'tracepoint:syscalls:sys_enter_openat { printf("TRACE: %s %s\n", comm, str(args->filename)); }' > logs/bpf_server.log 2>&1 &
          SERVER_PID=$!
          
          # Wait for server to initialize
          sleep 3
          
          echo "Starting bpftime client..."
          $HOME/.bpftime/bpftime start -s cat build/install_manifest.txt > logs/bpf_client.log 2>&1
          CLIENT_EXIT=$?
          
          # Give server time to process events
          sleep 2
          
          # Stop server
          kill $SERVER_PID 2>/dev/null || true
          
          echo "BPFtime server log:"
          cat logs/bpf_server.log
          
          echo "BPFtime client log:"
          cat logs/bpf_client.log
          
          # Check for success
          if grep -q "cat build/install_manifest.txt" logs/bpf_server.log; then
            echo "SUCCESS: BPFtime detected openat syscall"
            exit 0
          elif grep -q "Initialize syscall server" logs/bpf_server.log; then
            echo "PARTIAL SUCCESS: BPFtime server initialized but syscall not captured"
            # Continue despite this partial success
          else
            echo "FAILURE: BPFtime server failed to initialize"
            exit 1
          fi
          
          # If we've reached here, attempt a third test with LD_PRELOAD directly
          echo "Trying direct LD_PRELOAD method..."
          
          # Set up server with direct LD_PRELOAD
          BPFTIME_DEBUG=1 LD_PRELOAD="$HOME/.bpftime/libbpftime-syscall-server.so" \
          timeout -k 10s 8s bpftrace -e 'tracepoint:syscalls:sys_enter_openat { printf("DIRECT: %s %s\n", comm, str(args->filename)); }' > logs/direct_server.log 2>&1 &
          SERVER_PID=$!
          
          sleep 3
          
          # Run client with agent preload
          BPFTIME_DEBUG=1 LD_PRELOAD="$HOME/.bpftime/libbpftime-agent.so" \
          cat build/install_manifest.txt > logs/direct_client.log 2>&1
          
          sleep 2
          kill $SERVER_PID 2>/dev/null || true
          
          echo "Direct preload server log:"
          cat logs/direct_server.log
          
          if grep -q "cat build/install_manifest.txt" logs/direct_server.log; then
            echo "SUCCESS: Direct preload method detected openat syscall"
            exit 0
          else
            echo "FAILURE: All attempted methods failed"
            exit 1
          fi
          EOF
          chmod +x simple_test.sh

      - name: Run syscall tracing test
        run: |
          echo "==== Running syscall tracing test ===="
          ./syscall_test.sh || {
            echo "Primary test failed, trying simplified approach..."
            ./simple_test.sh
          }
      
      - name: Final check and summary
        run: |
          echo "==== Checking test results ===="
          
          # Check if any of the tests succeeded
          if grep -q "SUCCESS:" logs/server.log 2>/dev/null || \
             grep -q "SUCCESS:" logs/bpf_server.log 2>/dev/null || \
             grep -q "SUCCESS:" logs/direct_server.log 2>/dev/null; then
            echo "OVERALL RESULT: Syscall tracing test PASSED"
            exit 0
          else
            echo "OVERALL RESULT: Syscall tracing test FAILED"
            
            # Display detailed logs for debugging
            echo "==== Detailed Logs ===="
            echo "Server logs:"
            cat logs/server.log 2>/dev/null || echo "No server.log found"
            
            echo "Client logs:"
            cat logs/client.log 2>/dev/null || echo "No client.log found"
            
            # Check if files and paths exist
            echo "==== Environment Check ===="
            ls -la $HOME/.bpftime/
            ls -la /dev/shm/
            ls -la /tmp/bpftime_shm/
            
            exit 1
          fi