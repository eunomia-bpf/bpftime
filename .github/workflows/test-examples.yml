name: Build and run all integrated tests (examples)

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true
env:
  BPFTIME_VM_NAME: llvm
jobs:
  build-runtime:
    strategy:
      matrix:
        enable_jit:
          - true
          - false
        container:
          - image: ubuntu-2204
            name: ubuntu
          - image: fedora-39
            name: fedora
    runs-on: ubuntu-22.04
    container:
      image: "manjusakalza/bpftime-base-image:${{matrix.container.image}}"
      options: --privileged
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          channels: conda-forge,bioconda
          channel-priority: strict
          miniforge-version: latest
      - name: Install absl and protobuf
        run: conda install libabseil libprotobuf
      - name: Install lcov (Ubuntu)
        if: ${{matrix.container.name=='ubuntu'}}
        run: |
          apt-get update -y && apt-get install -y lcov tree
      - name: Install lcov (Fedora)
        if: ${{matrix.container.name =='fedora'}}
        run: |
          dnf install -y dnf-plugins-core
          dnf config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/fedora39/x86_64/cuda-fedora39.repo
          dnf install -y lcov tree clang-devel || true
          dnf install -y cuda --skip-broken --nobest || echo "CUDA installation failed, continuing without CUDA"
      - name: Build and install runtime (with llvm-jit)
        if: ${{matrix.enable_jit}}
        run: |
          cmake -Bbuild  -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo \
            -DBPFTIME_LLVM_JIT=1 \
            -DTEST_LCOV=YES \
            -DBUILD_BPFTIME_DAEMON=1 \
            -DCMAKE_CXX_FLAGS="-DDEFAULT_LOGGER_OUTPUT_PATH='\"console\"'" -Dabsl_DIR=~/miniconda3/lib/cmake/absl -DProtobuf_DIR=~/miniconda3/lib/cmake/protobuf -Dutf8_range_DIR=~/miniconda3/lib/cmake/utf8_range
          # mkdir -p build/runtime/pos/include/proto/
          # mkdir -p build/runtime/pos/cuda_impl/proto/
          # ln -sf /usr/lib/llvm-*/include/clang-c/ /usr/include/ || true
          # ln -sf /usr/lib/llvm-*/lib/libclang.so /usr/lib || true
          # cmake --build build --config RelWithDebInfo --target install -j || true
          # sed -i "s/&::descriptor_table_pos_2finclude_2fproto_2fhandle_2eproto/nullptr/g" build/runtime/pos/cuda_impl/proto/*.pb.cc
          # cmake --build build --config RelWithDebInfo --target install -j || true
          # sed -i "s/&::descriptor_table_pos_2finclude_2fproto_2fhandle_2eproto/nullptr/g" build/runtime/pos/cuda_impl/proto/*.pb.cc
          # cmake --build build --config RelWithDebInfo --target install -j || true
          # sed -i "s/&::descriptor_table_pos_2finclude_2fproto_2fhandle_2eproto/nullptr/g" build/runtime/pos/cuda_impl/proto/*.pb.cc
          # cmake --build build --config RelWithDebInfo --target install -j || true
          # sed -i "s/&::descriptor_table_pos_2finclude_2fproto_2fhandle_2eproto/nullptr/g" build/runtime/pos/cuda_impl/proto/*.pb.cc
          cmake --build build --config RelWithDebInfo --target install -j
      - name: Build and install runtime (without llvm-jit)
        if: ${{!matrix.enable_jit}}
        run: |
          cmake -Bbuild  -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo \
            -DBPFTIME_LLVM_JIT=0 \
            -DTEST_LCOV=YES \
            -DBUILD_BPFTIME_DAEMON=1 \
            -DCMAKE_CXX_FLAGS="-DDEFAULT_LOGGER_OUTPUT_PATH='\"console\"'" -Dabsl_DIR=~/miniconda3/lib/cmake/absl -DProtobuf_DIR=~/miniconda3/lib/cmake/protobuf -Dutf8_range_DIR=~/miniconda3/lib/cmake/utf8_range
          mkdir -p build/runtime/pos/include/proto/
          mkdir -p build/runtime/pos/cuda_impl/proto/
          ln -sf /usr/lib/llvm-*/include/clang-c/ /usr/include/ || true
          ln -sf /usr/lib/llvm-*/lib/libclang.so /usr/lib || true
          cmake --build build --config RelWithDebInfo --target install -j || true
          # sed -i "s/&::descriptor_table_pos_2finclude_2fproto_2fhandle_2eproto/nullptr/g" build/runtime/pos/cuda_impl/proto/*.pb.cc
          # cmake --build build --config RelWithDebInfo --target install -j || true
          # sed -i "s/&::descriptor_table_pos_2finclude_2fproto_2fhandle_2eproto/nullptr/g" build/runtime/pos/cuda_impl/proto/*.pb.cc
          # cmake --build build --config RelWithDebInfo --target install -j || true
          # sed -i "s/&::descriptor_table_pos_2finclude_2fproto_2fhandle_2eproto/nullptr/g" build/runtime/pos/cuda_impl/proto/*.pb.cc
          # cmake --build build --config RelWithDebInfo --target install -j || true
          # sed -i "s/&::descriptor_table_pos_2finclude_2fproto_2fhandle_2eproto/nullptr/g" build/runtime/pos/cuda_impl/proto/*.pb.cc
          cmake --build build --config RelWithDebInfo --target install -j
      - name: Build basic examples
        run: |
          # Ensure libbpf is built and create symlink if needed
          echo "Building libbpf and bpftool first..."
          cmake --build build --target libbpf -j || true
          cmake --build build --target bpftool -j || true

          # Fix clang BPF compilation issues for examples that use unsupported flags
          echo "Fixing clang BPF compilation flags..."

          # Fix lpm_trie_demo Makefile - remove unsupported -bpf-stack-size flag
          if [ -f "example/bpf_features/lpm_trie_demo/Makefile" ]; then
            sed -i 's/-mllvm -bpf-stack-size=8192//g' example/bpf_features/lpm_trie_demo/Makefile
            echo "Fixed lpm_trie_demo Makefile clang flags"
          fi

          # Build examples with error handling
          echo "Building examples..."

          # Special handling groups no longer needed; all examples build local libbpf now
          GLOBAL_LIBBPF_EXAMPLES=""
          LOCAL_LIBBPF_EXAMPLES="bpf_features/bloom_filter_demo minimal malloc tracing/opensnoop tracing/sslsniff bpf_features/tailcall_minimal minimal/usdt_minimal bpf_features/get_stack_id_example bpf_features/lpm_trie_demo bpf_features/queue_demo xdp-counter"

          # Build examples that use global libbpf first (need build/libbpf/libbpf.a)
          for example_name in $GLOBAL_LIBBPF_EXAMPLES; do
            if [ -d "example/$example_name" ] && [ -f "example/$example_name/Makefile" ]; then
              echo "Building $example_name (uses global libbpf)..."
              if ! make -C "example/$example_name" -j; then
                echo "Warning: Failed to build $example_name, continuing..."
              fi
            fi
          done

          # Build examples that build their own libbpf (use .output/libbpf.a)
          for example_name in $LOCAL_LIBBPF_EXAMPLES; do
            if [ -d "example/$example_name" ] && [ -f "example/$example_name/Makefile" ]; then
              echo "Building $example_name (builds local libbpf)..."
              if ! make -C "example/$example_name" -j; then
                echo "Warning: Failed to build $example_name, continuing..."
              fi
            fi
          done

          # Build any remaining examples
          for example_dir in example/*/; do
            if [ -f "$example_dir/Makefile" ]; then
              example_name=$(basename "$example_dir")
              # Skip if already built above
              if [[ ! " $GLOBAL_LIBBPF_EXAMPLES $LOCAL_LIBBPF_EXAMPLES " =~ " $example_name " ]]; then
                echo "Building $example_name (other)..."
                if ! make -C "$example_dir" -j; then
                  echo "Warning: Failed to build $example_name, continuing..."
                fi
              fi
            fi
          done
      - name: Package gcno files
        run: |
          find . -type f -name "*.gcno" | tar --create --gzip --file=gcno_files.tar.gz --files-from=-
          ls -la
          pwd
          tree .
      - name: Upload gcno file
        uses: actions/upload-artifact@v4
        with:
          name: gcno-files-${{matrix.enable_jit && 'jit' || 'no-jit'}}-${{matrix.container.name}}
          include-hidden-files: true
          path: |
            ./gcno_files.tar.gz
      - name: Upload build results (without jit)
        uses: actions/upload-artifact@v4
        if: ${{!matrix.enable_jit}}
        with:
          name: runtime-package-no-jit-${{matrix.container.name}}
          include-hidden-files: true
          path: |
            ~/.bpftime
      - name: Upload build results (with jit)
        uses: actions/upload-artifact@v4
        if: ${{matrix.enable_jit}}
        with:
          name: runtime-package-jit-${{matrix.container.name}}
          include-hidden-files: true
          path: |
            ~/.bpftime

  build-and-test:
    runs-on: ubuntu-22.04
    needs: [build-runtime]
    container:
      image: "manjusakalza/bpftime-base-image:${{matrix.container.image}}"
      options: " ${{matrix.privilege_options.options}}"
    strategy:
      fail-fast: false
      matrix:
        exclude:
          - privilege_options:
              enable: false
            examples:
              syscall_trace: true
          - privilege_options:
              enable: false
            examples:
              path: tailcall_minimal
          - privilege_options:
              enable: false
            examples:
              path: malloc
        privilege_options:
          - options: "--privileged -v /sys/kernel/debug/:/sys/kernel/debug:rw -v /sys/kernel/tracing:/sys/kernel/tracing:rw"
            enable: true
          - options: ""
            enable: false
        container:
          - image: ubuntu-2204
            name: ubuntu
          - image: fedora-39
            name: fedora
        enable_jit:
          - true
          - false
        examples:
          - path: tracing/opensnoop
            executable: ./opensnoop
            victim: ./victim
            syscall_trace: true
            expected_str: "   0 test.txt"
            name: opensnoop-libbpf-tools
          - path: tracing/statsnoop
            executable: ./statsnoop
            victim: ./victim
            syscall_trace: true
            expected_str: "victim               0    0    /sys"
            name: statsnoop
          - path: malloc
            executable: ./malloc
            victim: ./victim
            syscall_trace: false
            expected_str: "malloc calls: "
            name: malloc
          - path: minimal
            executable: ./uprobe
            victim: ./victim
            syscall_trace: false
            expected_str: ""
            name: minimal
          - path: tracing/opensnoop
            executable: ./opensnoop
            victim: ./victim
            syscall_trace: true
            expected_str: "   0 test.txt"
            name: opensnoop
          - path: tracing/sslsniff
            executable: ./sslsniff
            victim: /bin/wget https://www.google.com
            syscall_trace: false
            expected_str: "----- DATA -----"
            name: sslsniff
          - path: tracing/bashreadline
            executable: ./readline
            victim: /bin/bash
            syscall_trace: false
            expected_str: "info"
            name: bashreadline
          - path: tracing/syscount
            executable: ./syscount
            victim: /bin/bash
            syscall_trace: false
            expected_str: "info"
            name: syscount
          - path: tracing/funclatency
            executable: ./funclatency -i 1 ./victim:plus
            victim: ./victim
            syscall_trace: false
            expected_str: "|*"
            name: funclatency
          - path: tracing/mountsnoop
            executable: ./mountsnoop
            victim: ./victim
            syscall_trace: true
            expected_str: mount(
            name: mountsnoop
          - path: tracing/sigsnoop
            executable: ./sigsnoop
            victim: ./victim
            syscall_trace: true
            expected_str: "victim           0         -1      0"
            name: sigsnoop
          - path: bpf_features/tailcall_minimal
            executable: ./tailcall_minimal
            victim: ./victim
            syscall_trace: false
            expected_str: "See /sys/kernel/debug/tracing/trace_pipe for output (5)"
            name: tailcall_minimal
          - path: minimal/usdt_minimal
            executable: ./usdt_minimal
            victim: ./victim
            syscall_trace: false
            expected_str: "bpf:"
            name: usdt_minimal
          - path: bpf_features/get_stack_id_example
            executable: ./get_stack_id_example
            victim: ./victim
            syscall_trace: false
            expected_str: "Function: malloc enter"
            name: get_stack_id_example
          - path: bpf_features/bloom_filter_demo
            executable: ./uprobe_bloom_filter
            victim: ./target
            syscall_trace: false
            expected_str: "Bloom Filter Real-time Monitoring Statistics"
            name: bloom_filter_demo
          - path: bpf_features/lpm_trie_demo
            executable: ./file_access_monitor
            victim: ./file_access_target
            syscall_trace: false
            expected_str: "All tests passed! bpftime LPM Trie working correctly"
            name: lpm_trie_demo
          - path: bpf_features/queue_demo
            executable: ./uprobe_queue
            victim: ./target
            syscall_trace: false
            expected_str: "Queue status: non-empty"
            name: queue_demo
          - path: bpf_features/queue_demo
            executable: ./uprobe_stack
            victim: ./target
            syscall_trace: false
            expected_str: "Starting to pop events from stack"
            name: stack_demo

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
      - name: Download prebuilt runtime (with jit)
        if: ${{matrix.enable_jit}}
        uses: actions/download-artifact@v4
        with:
          name: runtime-package-jit-${{matrix.container.name}}
          path: ~/.bpftime
      - name: Download prebuilt runtime (without jit)
        if: ${{!matrix.enable_jit}}
        uses: actions/download-artifact@v4
        with:
          name: runtime-package-no-jit-${{matrix.container.name}}
          path: ~/.bpftime
      - name: Download gcno files
        uses: actions/download-artifact@v4
        with:
          name: gcno-files-${{matrix.enable_jit && 'jit' || 'no-jit'}}-${{matrix.container.name}}
          path: .
      - name: Extract gcno files
        run: |
          ls -lah .
          tar -zxvf gcno_files.tar.gz
          pwd
      - name: Install which(required by funclatency on fedora)
        if: ${{matrix.container.name=='fedora' && matrix.examples.path=='tracing/funclatency'}}
        run: |
          yum install -y which
      - name: Set permissions
        run: |
          chmod +x ~/.bpftime/*
      - name: Show downloaded artifacts
        run: |
          ls ~/.bpftime
      - name: Build test assets
        run: |
          # No special global libbpf handling is needed anymore

          # Fix clang BPF compilation issues
          if [ "${{matrix.examples.path}}" = "bpf_features/lpm_trie_demo" ]; then
            echo "Fixing clang BPF flags for lpm_trie_demo..."
            sed -i 's/-mllvm -bpf-stack-size=8192//g' example/bpf_features/lpm_trie_demo/Makefile
          fi

          # Build the example
          echo "Building example: ${{matrix.examples.path}}"
          # Ensure compilers can find bpf/ headers regardless of where libbpf installed them
          export C_INCLUDE_PATH="build/libbpf:build/libbpf/bpf:third_party/bpftool/build/usr/include:third_party/bpftool/build/usr/include/bpf:third_party/bpftool/build/include:third_party/bpftool/build/include/bpf:${C_INCLUDE_PATH}"
          export CPLUS_INCLUDE_PATH="build/libbpf:build/libbpf/bpf:third_party/bpftool/build/usr/include:third_party/bpftool/build/usr/include/bpf:third_party/bpftool/build/include:third_party/bpftool/build/include/bpf:${CPLUS_INCLUDE_PATH}"
          make -C example/${{matrix.examples.path}} -j
      - name: Set BPFTIME_VM_NAME for ubpf # Set environment variable when llvm-jit is disabled
        if: "!matrix.enable_jit"
        run: |
          echo "BPFTIME_VM_NAME=ubpf" >> $GITHUB_ENV
      - name: Test CLI - show help
        run: |
          export PATH=$PATH:~/.bpftime
          bpftime --help
      - name: Test CLI - attach by running (syscall_trace)
        if: matrix.examples.syscall_trace
        shell: bash
        run: |
          ROOT=$(pwd)
          cd example/${{matrix.examples.path}}
          python3 $ROOT/.github/script/run_example.py "${{matrix.examples.executable}}" "${{matrix.examples.victim}}" "${{matrix.examples.expected_str}}" "/github/home/.bpftime/bpftime -i /github/home/.bpftime" 1
      - name: Test CLI - attach by running (uprobe)
        if: "!matrix.examples.syscall_trace"
        shell: bash
        run: |
          ROOT=$(pwd)
          cd example/${{matrix.examples.path}}
          python3 $ROOT/.github/script/run_example.py "${{matrix.examples.executable}}" "${{matrix.examples.victim}}" "${{matrix.examples.expected_str}}" "/github/home/.bpftime/bpftime -i /github/home/.bpftime" 0
      - name: Generate example coverage (Ubuntu)
        if: "matrix.container.image == 'ubuntu-2204'"
        run: |
          apt-get update -y && apt-get install -y gpg lcov
          lcov --ignore-errors gcov  --capture --directory . --directory .github --directory /github/home/.bpftime --output-file coverage-example.info --gcov-tool $(which gcov-12)
          lcov --ignore-errors gcov --remove coverage-example.info '/usr/*' --output-file coverage-example.info
          lcov --ignore-errors gcov --list coverage-example.info
      - name: Generate example coverage (Fedora)
        if: "matrix.container.image == 'fedora-39'"
        run: |
          dnf install -y lcov
          lcov --ignore-errors gcov --capture --directory . --output-file coverage-example.info
          lcov --ignore-errors gcov --remove coverage-example.info '/usr/*' --output-file coverage-example.info
          lcov --ignore-errors gcov --list coverage-example.info
      - name: Upload example coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-example-${{matrix.container.name}}-${{matrix.enable_jit}}-${{matrix.examples.name}}-${{matrix.privilege_options.enable}}
          include-hidden-files: false
          path: |
            ./coverage-example.info
      - uses: codecov/codecov-action@v4
        # Only upload when this workflow was run on the main repository
        if: github.repository == 'eunomia-bpf/bpftime' && github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          fail_ci_if_error: true # optional (default = false)
          files: ./coverage-example.info
          flags: coverage-example-${{matrix.container.name}}-${{matrix.enable_jit}}-${{matrix.examples.name}}-${{matrix.privilege_options.enable}}
          token: ${{ secrets.CODECOV_TOKEN }} # required
          verbose: true # optional (default = false)

