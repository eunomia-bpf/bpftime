name: BPFtime Syscall Tracing (Complete LD_PRELOAD Method)

on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["*"]
  workflow_dispatch:

env:
  BPFTIME_VM_NAME: llvm
  SPDLOG_LEVEL: debug
  BPFTIME_LOG_OUTPUT: console
  BPFTIME_SHARED_MEMORY_PATH: /dev/shm
  SERVER_LOG: logs/bpftime_server.log
  CLIENT_LOG: logs/bpftime_client.log

jobs:
  syscall-tracing-load-start-test:
    runs-on: ubuntu-22.04
    container:
      image: "manjusakalza/bpftime-base-image:ubuntu-2204"
      options: "--privileged -v /sys/kernel/debug:/sys/kernel/debug:rw -v /sys/kernel/tracing:/sys/kernel/tracing:rw -v /dev/shm:/dev/shm:rw -v /tmp:/tmp:rw -v /run/shm:/run/shm:rw"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: System setup and kernel headers
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            lcov tree strace gdb sudo libc6-dev bpftrace \
            linux-headers-generic linux-tools-generic \
            linux-headers-$(uname -r) \
            libelf-dev procps
          uname -a && cat /etc/os-release
          which bpftrace && bpftrace --version || echo "bpftrace not found"
          mkdir -p logs build
          echo "TEST_DATA_LINE_1_ABC" > build/install_manifest.txt
          echo "TEST_DATA_LINE_2_XYZ" >> build/install_manifest.txt
          
          sudo mkdir -p $BPFTIME_SHARED_MEMORY_PATH
          sudo chmod 1777 $BPFTIME_SHARED_MEMORY_PATH
          
      - name: Build bpftime
        run: |
          cmake -Bbuild -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo \
            -DBPFTIME_LLVM_JIT=1 \
            -DBUILD_BPFTIME_DAEMON=1 \
            -DBUILD_AGENT=1 \
            -DCMAKE_CXX_FLAGS="-DDEFAULT_LOGGER_OUTPUT_PATH='\"console\"'"
          cmake --build build --config RelWithDebInfo -j$(nproc)
          
          ls -la build/runtime/agent/
          ls -la build/runtime/syscall-server/
          
      - name: Find necessary libraries
        run: |
          find build -name "*.so" | sort

          AGENT_LIB="build/runtime/agent/libbpftime-agent.so"
          SERVER_LIB="build/runtime/syscall-server/libbpftime-syscall-server.so"
          TRANSFORMER_LIB="build/attach/text_segment_transformer/libbpftime-agent-transformer.so"

          if [ ! -f "$AGENT_LIB" ]; then
            AGENT_LIB=$(find build -name "libbpftime-agent.so" | head -1)
            if [ -z "$AGENT_LIB" ]; then
              echo "Could not find agent library anywhere"
              exit 1
            fi
          fi

          if [ ! -f "$SERVER_LIB" ]; then
            SERVER_LIB=$(find build -name "libbpftime-syscall-server.so" | head -1)
            if [ -z "$SERVER_LIB" ]; then
              echo "Could not find server library anywhere"
              exit 1
            fi
          fi

          if [ ! -f "$TRANSFORMER_LIB" ]; then
            TRANSFORMER_LIB=$(find build -name "libbpftime-agent-transformer.so" | head -1)
          fi

          echo "AGENT_LIB=$AGENT_LIB" >> $GITHUB_ENV
          echo "SERVER_LIB=$SERVER_LIB" >> $GITHUB_ENV
          echo "TRANSFORMER_LIB=$TRANSFORMER_LIB" >> $GITHUB_ENV
          
      - name: Run server and client test
        run: |
          AGENT_LIB="${{ env.AGENT_LIB }}"
          SERVER_LIB="${{ env.SERVER_LIB }}"
          TRANSFORMER_LIB="${{ env.TRANSFORMER_LIB }}"

          mkdir -p logs
          rm -f "$SERVER_LOG" "$CLIENT_LOG" 2>/dev/null || true

          export BPFTIME_USED=1
          export SPDLOG_LEVEL=debug

          sudo -E LD_PRELOAD=$SERVER_LIB bpftrace -e 'tracepoint:syscalls:sys_enter_openat { printf("SERVER_TRACE (openat): %s %s\n", comm, str(args->filename)); }' > "$SERVER_LOG" 2>&1 &
          SERVER_PID=$!

          INIT_TIMEOUT=30
          for i in $(seq 1 $INIT_TIMEOUT); do
            if grep -q "Attaching" "$SERVER_LOG"; then
              break
            fi
            if [ $i -eq $INIT_TIMEOUT ]; then
              echo "ERROR: Server did not initialize after $INIT_TIMEOUT seconds"
              cat "$SERVER_LOG"
              exit 1
            fi
            sleep 1
          done

          if ! ps -p $SERVER_PID > /dev/null; then
            echo "ERROR: Server process died during initialization"
            cat "$SERVER_LOG"
            exit 1
          fi

          if [ -n "$TRANSFORMER_LIB" ]; then
            LD_PRELOAD_CMD="env AGENT_SO=$AGENT_LIB LD_PRELOAD=$TRANSFORMER_LIB"
          else
            LD_PRELOAD_CMD="env LD_PRELOAD=$AGENT_LIB"
          fi

          sudo -E $LD_PRELOAD_CMD cat build/install_manifest.txt | tee "$CLIENT_LOG"
          CAT_EXIT_CODE=$?

          sleep 10
          sync

          if grep -q "SERVER_TRACE.*cat.*build/install_manifest.txt" "$SERVER_LOG"; then
            CAT_TRACE_FOUND="true"
          else
            CAT_TRACE_FOUND="false"
          fi

          sudo kill -9 $SERVER_PID 2>/dev/null || echo "Kill failed"
          sleep 2

          if [ "$CAT_EXIT_CODE" = "0" ] && [ "$CAT_TRACE_FOUND" = "true" ]; then
            exit 0
          else
            echo "FAILURE: Test did not meet all success criteria"
            if [ "$CAT_EXIT_CODE" != "0" ]; then
              echo "  - Cat command execution failed with exit code $CAT_EXIT_CODE"
            fi
            if [ "$CAT_TRACE_FOUND" != "true" ]; then
              echo "  - Cat command tracing is not working"
            fi
            exit 1
          fi
          
  uprobe-readline-test:
    name: BPFtime Uprobe Readline Test
    runs-on: ubuntu-22.04
    container:
      image: "manjusakalza/bpftime-base-image:ubuntu-2204"
      options: "--privileged -v /sys/kernel/debug:/sys/kernel/debug:rw -v /sys/kernel/tracing:/sys/kernel/tracing:rw -v /dev/shm:/dev/shm:rw -v /tmp:/tmp:rw -v /run/shm:/run/shm:rw"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: "recursive"

      - name: System setup and kernel headers
        run: |
          export DEBIAN_FRONTEND=noninteractive
          export TZ=Etc/UTC
          apt-get update
          apt-get install -y --no-install-recommends \
            lcov tree strace gdb sudo libc6-dev bpftrace \
            linux-headers-generic linux-tools-generic \
            linux-headers-$(uname -r) \
            libelf-dev procps expect
          uname -a && cat /etc/os-release
          which bpftrace && bpftrace --version || echo "bpftrace not found"
          mkdir -p logs build

          sudo mkdir -p $BPFTIME_SHARED_MEMORY_PATH
          sudo chmod 1777 $BPFTIME_SHARED_MEMORY_PATH
          
      - name: Build bpftime
        run: |
          cmake -Bbuild -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo \
            -DBPFTIME_LLVM_JIT=1 \
            -DBUILD_BPFTIME_DAEMON=1 \
            -DBUILD_AGENT=1 \
            -DCMAKE_CXX_FLAGS="-DDEFAULT_LOGGER_OUTPUT_PATH='\"console\"'"
          cmake --build build --config RelWithDebInfo -j$(nproc)
          
          ls -la build/runtime/agent/
          ls -la build/runtime/syscall-server/
          
      - name: Find necessary libraries
        run: |
          find build -name "*.so" | sort

          AGENT_LIB="build/runtime/agent/libbpftime-agent.so"
          SERVER_LIB="build/runtime/syscall-server/libbpftime-syscall-server.so"
          TRANSFORMER_LIB="build/attach/text_segment_transformer/libbpftime-agent-transformer.so"

          if [ ! -f "$AGENT_LIB" ]; then
            AGENT_LIB=$(find build -name "libbpftime-agent.so" | head -1)
            if [ -z "$AGENT_LIB" ]; then
              echo "Could not find agent library anywhere"
              exit 1
            fi
          fi

          if [ ! -f "$SERVER_LIB" ]; then
            SERVER_LIB=$(find build -name "libbpftime-syscall-server.so" | head -1)
            if [ -z "$SERVER_LIB" ]; then
              echo "Could not find server library anywhere"
              exit 1
            fi
          fi

          if [ ! -f "$TRANSFORMER_LIB" ]; then
            TRANSFORMER_LIB=$(find build -name "libbpftime-agent-transformer.so" | head -1)
          fi

          echo "AGENT_LIB=$AGENT_LIB" >> $GITHUB_ENV
          echo "SERVER_LIB=$SERVER_LIB" >> $GITHUB_ENV
          echo "TRANSFORMER_LIB=$TRANSFORMER_LIB" >> $GITHUB_ENV
    
      - name: Run uprobe readline test
        run: |
          SERVER_LIB="${{ env.SERVER_LIB }}"
          
          mkdir -p logs
          SERVER_LOG="logs/uprobe_server.log"
          CLIENT_LOG="logs/uprobe_client.log"
          rm -f "$SERVER_LOG" "$CLIENT_LOG" 2>/dev/null || true
          
          readelf -s /bin/bash | grep readline | tee -a "$CLIENT_LOG"
          
          LD_PRELOAD=$SERVER_LIB sudo bpftrace -e 'uretprobe:/bin/bash:readline { printf("%-6d %s\n", pid, str(retval)); }' > "$SERVER_LOG" 2>&1 &
          SERVER_PID=$!
          
          INIT_TIMEOUT=60
          for i in $(seq 1 $INIT_TIMEOUT); do
            if grep -q "Attaching" "$SERVER_LOG"; then
              break
            fi
            if [ $((i % 10)) -eq 0 ]; then
              cat "$SERVER_LOG"
            fi
            if [ $i -eq $INIT_TIMEOUT ]; then
              echo "ERROR: Server did not initialize after $INIT_TIMEOUT seconds"
              cat "$SERVER_LOG"
              exit 1
            fi
            sleep 1
          done
          
          if ! ps -p $SERVER_PID > /dev/null; then
            echo "ERROR: Server process died during initialization"
            cat "$SERVER_LOG"
            exit 1
          fi
          
          cat > logs/expect_script.exp << 'EOF'
          #!/usr/bin/expect -f
          set timeout 10
          spawn sudo bash --norc --noprofile
          expect "#"
          send "1\r"
          expect "#"
          send "pwd\r"
          expect "#"
          send "exit\r"
          expect eof
          EOF
          chmod +x logs/expect_script.exp
          
          ./logs/expect_script.exp > "$CLIENT_LOG" 2>&1
          BASH_EXIT_CODE=$?
          
          sleep 10
          sync
          
          if grep -q -E "[0-9]+[[:space:]]+" "$SERVER_LOG"; then
            TRACE_FOUND="true"
          else
            TRACE_FOUND="false"
          fi
          
          sudo kill -9 $SERVER_PID 2>/dev/null || echo "Kill failed"
          sleep 2
          
          if [ "$BASH_EXIT_CODE" = "0" ] && [ "$TRACE_FOUND" = "true" ]; then
            exit 0
          else
            echo "FAILURE: Test did not meet all success criteria"
            if [ "$BASH_EXIT_CODE" != "0" ]; then
              echo "  - Bash command execution failed with exit code $BASH_EXIT_CODE"
            fi
            if [ "$TRACE_FOUND" != "true" ]; then
              echo "  - Uprobe tracing for bash:readline is not working"
            fi
            exit 1
          fi