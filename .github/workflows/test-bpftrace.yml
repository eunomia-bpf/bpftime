name: BPFtime Syscall Tracing Test

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

jobs:
  syscall-tracing-test:
    runs-on: ubuntu-22.04
    container: 
      image: "manjusakalza/bpftime-base-image:ubuntu-2204"
      options: "--privileged"
    
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
      
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y lcov tree strace gdb sudo
      
      - name: Build and install runtime
        run: |
          cmake -Bbuild  -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo \
            -DBPFTIME_LLVM_JIT=1 \
            -DBUILD_BPFTIME_DAEMON=1 \
            -DCMAKE_CXX_FLAGS="-DDEFAULT_LOGGER_OUTPUT_PATH='\"console\"'"
          cmake --build build --config RelWithDebInfo --target install -j
      
      - name: Check installed files
        run: |
          echo "Checking installed bpftime files:"
          ls -la ~/.bpftime/
      
      - name: Test example 1 - Syscall tracing with bpftrace
        run: |
          # Create a test file that will be accessed by cat
          echo "Test content for example 1" > example1_test.txt
          
          # Run the exact example 1 with a timeout to avoid hanging
          echo "Running syscall tracing example 1:"
          timeout 10s sudo SPDLOG_LEVEL=error ~/.bpftime/bpftime load bpftrace -e 'tracepoint:syscalls:sys_enter_openat { printf("%s %s\n", comm, str(args->filename)); }' &
          
          # Store the PID to terminate it later
          BPFTRACE_PID=$!
          
          # Wait for bpftrace to initialize
          sleep 3
          
          # Run cat to trigger the tracepoint
          echo "Running cat to trigger the openat syscall:"
          cat example1_test.txt
          
          # Wait a bit more for output to be captured
          sleep 2
          
          # Terminate the bpftrace process
          kill $BPFTRACE_PID || echo "[INFO] Process already terminated"
          
          echo "[PASS] Example 1 test completed"
      
      - name: Test example 2 - Start cat with bpftime
        run: |
          # Create a test manifest file
          mkdir -p build
          echo "/test/path/1" > build/install_manifest.txt
          echo "/test/path/2" >> build/install_manifest.txt
          
          # Run the exact example 2
          echo "Running bpftime start example 2:"
          output=$(sudo SPDLOG_LEVEL=error ~/.bpftime/bpftime start -s cat build/install_manifest.txt)
          result=$?
          
          # Show the output
          echo "Command output (exit code $result):"
          echo "$output"
          
          # Verify the output contains the expected content
          echo "Verifying output:"
          echo "$output" | grep -q "/test/path/1" && echo "[PASS] Found first path in output" || echo "[FAIL] First path not found"
          echo "$output" | grep -q "/test/path/2" && echo "[PASS] Found second path in output" || echo "[FAIL] Second path not found"
          
          # Overall test result
          if [ $result -eq 0 ] && echo "$output" | grep -q "/test/path"; then
            echo "[PASS] Example 2 test completed successfully"
          else
            echo "[FAIL] Example 2 test failed with code $result"
            exit 1
          fi
      
      - name: Additional verification tests
        run: |
          # Verify bpftime daemon can start
          echo "Verifying bpftime_daemon can start:"
          sudo ~/.bpftime/bpftime_daemon --help
          
          # Verify bpftime can run simple commands
          echo "Verifying bpftime can run simple commands:"
          sudo ~/.bpftime/bpftime start echo "Hello from bpftime"
          
          # Check bpftime and bpftrace versions
          echo "Checking bpftime version:"
          sudo ~/.bpftime/bpftime --version || echo "No version command available"
          
          echo "Checking bpftrace version:"
          bpftrace --version || { 
            echo "bpftrace not in PATH, checking if it's installed elsewhere"
            find / -name bpftrace -type f 2>/dev/null || echo "bpftrace not found"
          }
      
      - name: Summary
        run: |
          echo "==== Test Summary ===="
          echo "Tests completed. Examples from the README were executed."
          echo "bpftime binary verification: $([ -x ~/.bpftime/bpftime ] && echo 'OK' || echo 'FAILED')"
          
          # Print confirmation of success
          echo "[PASS] CI workflow completed"