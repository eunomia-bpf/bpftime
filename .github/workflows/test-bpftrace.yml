name: BPFtime Syscall Tracing Test (Revised - Raw Syscalls)

on:
  push:
    branches: [ "*" ]
  pull_request:
    branches: [ "*" ]

jobs:
  syscall-tracing-test:
    runs-on: ubuntu-22.04
    container:
      image: "manjusakalza/bpftime-base-image:ubuntu-2204"
      options: "--privileged" # Essential for bpf/bpftrace

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y --no-install-recommends \
            lcov tree strace gdb sudo tmux screen bpftrace \
            llvm-dev libelf-dev libbpf-dev libc6-dev auditd # auditd provides ausyscall
          echo "Runner user: $(whoami)"
          which bpftrace || (echo "bpftrace not found" && exit 1)
          bpftrace --version || (echo "bpftrace not working" && exit 1)
          # Check sudo again, just in case
          sudo -n true || (echo "Passwordless sudo check failed." && exit 1)
          # Find openat syscall number for x86_64 (usually 257)
          # Using ausyscall, requires auditd package
          OPENAT_SYSCALL_NR=$(ausyscall x86_64 openat)
          echo "Detected openat syscall number: $OPENAT_SYSCALL_NR"
          # Fallback if ausyscall failed or isn't available
          if [ -z "$OPENAT_SYSCALL_NR" ] || [ "$OPENAT_SYSCALL_NR" = "0" ]; then
            echo "ausyscall failed, using default 257 for openat x86_64"
            OPENAT_SYSCALL_NR=257
          fi
          # Store it in the environment for later steps
          echo "OPENAT_SYSCALL_NR=${OPENAT_SYSCALL_NR}" >> $GITHUB_ENV

      - name: Build and install runtime
        run: |
          echo "Building bpftime, installing to $HOME/.bpftime"
          cmake -Bbuild  -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo \
            -DCMAKE_INSTALL_PREFIX=$HOME/.bpftime \
            -DBPFTIME_LLVM_JIT=1 \
            -DBUILD_BPFTIME_DAEMON=1 \
            -DCMAKE_CXX_FLAGS="-DDEFAULT_LOGGER_OUTPUT_PATH='\"console\"'"
          cmake --build build --config RelWithDebInfo --target install -j$(nproc)

      - name: Verify installation and List Tracepoints
        run: |
          echo "Checking installed bpftime files in $HOME/.bpftime:"
          ls -la $HOME/.bpftime/
          test -f $HOME/.bpftime/libbpftime-syscall-server.so || (echo "$HOME/.bpftime/libbpftime-syscall-server.so not found!" && exit 1)
          test -f $HOME/.bpftime/libbpftime-agent-transformer.so || (echo "$HOME/.bpftime/libbpftime-agent-transformer.so not found!" && exit 1)
          test -f $HOME/.bpftime/libbpftime-agent.so || (echo "$HOME/.bpftime/libbpftime-agent.so not found!" && exit 1)
          test -f $HOME/.bpftime/bpftime || (echo "$HOME/.bpftime/bpftime executable not found!" && exit 1)
          sudo which bpftrace

          # List available syscall tracepoints for diagnostics
          echo "--- Available Syscall Tracepoints ---"
          sudo bpftrace -l 'tracepoint:syscalls:*' || echo "Could not list syscalls tracepoints"
          echo "--- Available Raw Syscall Tracepoints ---"
          sudo bpftrace -l 'tracepoint:raw_syscalls:*' || echo "Could not list raw_syscalls tracepoints"
          echo "-----------------------------------"

          mkdir -p build
          echo "/test/path/from/ci/1" > build/install_manifest.txt
          echo "/test/path/from/ci/2" >> build/install_manifest.txt
          echo "Created test file (build/install_manifest.txt):"
          cat build/install_manifest.txt

      - name: Create script files for server and client
        env:
          # Make the syscall number available inside the script creation step
          OPENAT_NR: ${{ env.OPENAT_SYSCALL_NR }}
        run: |
          BPFTRACE_PATH=$(which bpftrace)

          # Create server script using raw_syscalls tracepoint
          cat > server_script.sh << EOF
          #!/bin/bash
          set -e
          echo "Starting bpftrace server with preload (using raw_syscalls)..."
          echo "Using bpftrace at: $BPFTRACE_PATH"
          echo "Preloading: $HOME/.bpftime/libbpftime-syscall-server.so"
          echo "Filtering for openat syscall number: ${OPENAT_NR}"
          ls -la $HOME/.bpftime/libbpftime-syscall-server.so

          # Use raw_syscalls:sys_enter, filter by ID, get filename from args->args[1]
          # Using the numeric syscall value determined earlier
          sudo -E bash -c "BPFTIME_VM_NAME=llvm LD_PRELOAD=\$HOME/.bpftime/libbpftime-syscall-server.so $BPFTRACE_PATH -e 'tracepoint:raw_syscalls:sys_enter /args->id == ${OPENAT_NR}/ { printf(\"%-16s %s\\n\", comm, str(args->args[1])); }'" 2>&1

          echo "Server script intended execution finished."
          EOF
          chmod +x server_script.sh
          echo "--- Server Script Content ---"
          cat server_script.sh
          echo "-----------------------------"

          # Create client script (remains the same)
          cat > client_script.sh << EOF
          #!/bin/bash
          set -e
          echo "Running cat client with agent preload..."
          echo "Preloading: $HOME/.bpftime/libbpftime-agent-transformer.so"
          echo "Agent SO: $HOME/.bpftime/libbpftime-agent.so"
          echo "Target file: build/install_manifest.txt"
          ls -la $HOME/.bpftime/libbpftime-agent-transformer.so $HOME/.bpftime/libbpftime-agent.so

          sudo -E bash -c "BPFTIME_VM_NAME=llvm LD_PRELOAD=\$HOME/.bpftime/libbpftime-agent-transformer.so BPFTIME_LOG_OUTPUT=stderr AGENT_SO=\$HOME/.bpftime/libbpftime-agent.so cat build/install_manifest.txt" 2>&1

          echo "Client script finished."
          EOF
          chmod +x client_script.sh
          echo "--- Client Script Content ---"
          cat client_script.sh
          echo "-----------------------------"

      - name: Test Server and Client Interaction
        run: |
          echo "Starting server script in background..."
          ./server_script.sh > server.log 2>&1 &
          SERVER_PID=$!
          echo "Server PID: $SERVER_PID"

          echo "Waiting 10 seconds for server initialization..."
          sleep 10

          if ! ps -p $SERVER_PID > /dev/null; then
            echo "Server process $SERVER_PID exited prematurely!"
            echo "--- Server Log Start (Premature Exit) ---"
            cat server.log || echo "server.log not found or empty"
            echo "--- Server Log End (Premature Exit) ---"
            exit 1
          fi
          echo "Server process $SERVER_PID is running."

          echo "Running client script..."
          ./client_script.sh > client.log 2>&1
          CLIENT_EXIT_CODE=$?
          echo "Client script exited with code $CLIENT_EXIT_CODE"

          echo "--- Client Log Start ---"
          cat client.log || echo "client.log not found or empty"
          echo "--- Client Log End ---"

          echo "Waiting 5 seconds for server to process events..."
          sleep 5

          echo "Stopping server script (PID: $SERVER_PID)..."
          sudo kill -9 $SERVER_PID || echo "Kill command failed (server process $SERVER_PID likely already stopped)."
          timeout 5s wait $SERVER_PID || echo "Server process $SERVER_PID did not terminate gracefully after kill or was already gone."

          echo "Server script stopped."

          echo "--- Server Log Start ---"
          cat server.log || echo "server.log not found or empty"
          echo "--- Server Log End ---"

          echo "Verifying server captured the client's openat syscall..."
          # Check server log for the expected trace line from the raw_syscalls filter
          if grep -Eq ' (cat|sudo) *.*build/install_manifest.txt' server.log; then
            echo "[SUCCESS] Server log contains the expected openat trace."
          else
            echo "[FAILURE] Server log does NOT contain the expected openat trace for 'build/install_manifest.txt'."
            echo "Expected pattern: ' (cat|sudo) *.*build/install_manifest.txt'"
            exit 1
          fi

          if [ $CLIENT_EXIT_CODE -ne 0 ]; then
             echo "[WARNING] Client script exited with non-zero status ($CLIENT_EXIT_CODE)."
             # exit 1 # Uncomment if client failure should fail the job
          fi

      - name: Final Summary
        if: always()
        run: |
          echo "==== Test Summary ===="
          echo "Attempted to run bpftrace server (using raw_syscalls) and cat client."
          echo "Checked server logs for expected syscall trace from the client."
          echo "Final status: ${{ job.status }}"
          echo "Listing key files:"
          ls -la $HOME/.bpftime/
          ls -la build/