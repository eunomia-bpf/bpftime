static const char TRAMPOLINE_PTX[] = R"(
//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_60
.address_size 64

	// .globl	spin_lock               // -- Begin function spin_lock
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.visible .const .align 8 .u64 constData;
.visible .const .align 4 .b8 map_info[4096];
.global .align 1 .b8 _$_str[45] = {107, 101, 114, 110, 101, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 116, 101, 114, 101, 100, 44, 32, 109, 101, 109, 61, 37, 108, 120, 44, 32, 109, 101, 109, 115, 122, 61, 37, 108, 100, 10, 0};
.global .align 1 .b8 __const_$_bpf_main_$_buf[16] = {97, 97, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
.global .align 1 .b8 _$_str1[32] = {115, 101, 116, 117, 112, 32, 102, 117, 110, 99, 116, 105, 111, 110, 44, 32, 99, 111, 110, 115, 116, 32, 100, 97, 116, 97, 61, 37, 108, 120, 10, 0};
.global .align 1 .b8 __const_$_bpf_main_$_msg[26] = {77, 101, 115, 115, 97, 103, 101, 32, 102, 114, 111, 109, 32, 98, 112, 102, 58, 32, 37, 100, 44, 32, 37, 108, 120, 0};
.global .align 1 .b8 _$_str2[11] = {99, 97, 108, 108, 32, 100, 111, 110, 101, 10, 0};
.global .align 1 .b8 _$_str3[23] = {103, 111, 116, 32, 114, 101, 115, 112, 111, 110, 115, 101, 32, 37, 100, 32, 97, 116, 32, 37, 100, 10, 0};
                                        // @spin_lock
.visible .func spin_lock(
	.param .b64 spin_lock_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<2>;

// %bb.0:
	ld.param.u64 	%rd1, [spin_lock_param_0];
$L__BB0_1:                              // =>This Inner Loop Header: Depth=1
	atom.cas.b32 	%r1, [%rd1], 0, 1;
	setp.eq.s32 	%p1, %r1, 1;
	@%p1 bra 	$L__BB0_1;
// %bb.2:
	ret;
                                        // -- End function
}
	// .globl	spin_unlock             // -- Begin function spin_unlock
.visible .func spin_unlock(
	.param .b64 spin_unlock_param_0
)                                       // @spin_unlock
{
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<2>;

// %bb.0:
	ld.param.u64 	%rd1, [spin_unlock_param_0];
	atom.exch.b32 	%r1, [%rd1], 0;
	ret;
                                        // -- End function
}
	// .globl	make_helper_call        // -- Begin function make_helper_call
.visible .func  (.param .align 8 .b8 func_retval0[8]) make_helper_call(
	.param .b64 make_helper_call_param_0,
	.param .b32 make_helper_call_param_1
)                                       // @make_helper_call
{
	.reg .pred 	%p<7>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<14>;

// %bb.0:
	ld.param.u32 	%r5, [make_helper_call_param_1];
	ld.param.u64 	%rd6, [make_helper_call_param_0];
	ld.const.u64 	%rd1, [constData];
	mov.u32 	%r7, %tid.x;
	and.b32  	%r1, %r7, 31;
	add.s64 	%rd10, %rd1, 4;
	mov.u32 	%r14, 0;
	mov.u64 	%rd13, 0;
	add.s64 	%rd8, %rd1, 8;
	mov.u32 	%r12, 42;
	bra.uni 	$L__BB2_1;
$L__BB2_4:                              //   in Loop: Header=BB2_1 Depth=1
	bar.warp.sync 	%r3;
	add.s32 	%r14, %r14, 1;
	setp.eq.s32 	%p6, %r14, 32;
	@%p6 bra 	$L__BB2_5;
$L__BB2_1:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB2_2 Depth 2
	// begin inline asm
	activemask.b32 %r3;
	// end inline asm
	shr.u32 	%r9, %r3, %r14;
	and.b32  	%r10, %r9, 1;
	setp.eq.b32 	%p1, %r10, 1;
	not.pred 	%p2, %p1;
	setp.ne.s32 	%p3, %r1, %r14;
	or.pred  	%p4, %p3, %p2;
	@%p4 bra 	$L__BB2_4;
$L__BB2_2:                              //   Parent Loop BB2_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	atom.cas.b32 	%r11, [%rd8], 0, 1;
	setp.eq.s32 	%p5, %r11, 1;
	@%p5 bra 	$L__BB2_2;
// %bb.3:                               //   in Loop: Header=BB2_1 Depth=1
	st.u32 	[%rd1+12], %r5;
	st.u64 	[%rd1+16], %rd6;
	// begin inline asm
	.reg .pred p0;                   
	membar.sys;                      
	st.global.u32 [%rd1], 1;           
	spin_wait:                       
	membar.sys;                      
	ld.global.u32 %r12, [%rd10];          
	setp.eq.u32 p0, %r12, 0;           
	@p0 bra spin_wait;               
	st.global.u32 [%rd10], 0;           
	membar.sys;                      
	
	// end inline asm
	ld.u64 	%rd13, [%rd1+2147483680];
	atom.exch.b32 	%r13, [%rd8], 0;
	bra.uni 	$L__BB2_4;
$L__BB2_5:
	st.param.b64 	[func_retval0+0], %rd13;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0001    // -- Begin function _bpf_helper_ext_0001
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0001(
	.param .b64 _bpf_helper_ext_0001_param_0,
	.param .b64 _bpf_helper_ext_0001_param_1,
	.param .b64 _bpf_helper_ext_0001_param_2,
	.param .b64 _bpf_helper_ext_0001_param_3,
	.param .b64 _bpf_helper_ext_0001_param_4
)                                       // @_bpf_helper_ext_0001
{
	.reg .pred 	%p<12>;
	.reg .b16 	%rs<6>;
	.reg .b32 	%r<27>;
	.reg .b64 	%rd<39>;

// %bb.0:
	ld.param.u64 	%rd18, [_bpf_helper_ext_0001_param_0];
	ld.const.u64 	%rd30, [constData];
	shl.b64 	%rd20, %rd18, 4;
	mov.u64 	%rd21, map_info;
	add.s64 	%rd22, %rd21, %rd20;
	ld.const.u32 	%r10, [%rd22+4];
	setp.lt.s32 	%p1, %r10, 1;
	@%p1 bra 	$L__BB3_7;
// %bb.1:
	ld.param.u64 	%rd19, [_bpf_helper_ext_0001_param_1];
	cvt.u64.u32 	%rd3, %r10;
	cvt.u32.u64 	%r12, %rd3;
	and.b32  	%r25, %r12, 3;
	setp.lt.u32 	%p2, %r12, 4;
	mov.u32 	%r24, 0;
	@%p2 bra 	$L__BB3_4;
// %bb.2:
	add.s64 	%rd2, %rd30, 24;
	and.b64  	%rd4, %rd3, 4294967292;
	add.s64 	%rd5, %rd19, 3;
	mov.u64 	%rd34, 0;
	cvt.u32.u64 	%r13, %rd4;
$L__BB3_3:                              // =>This Inner Loop Header: Depth=1
	add.s64 	%rd24, %rd5, %rd34;
	ld.u8 	%rs1, [%rd24+-3];
	add.s64 	%rd25, %rd2, %rd34;
	st.u8 	[%rd25], %rs1;
	ld.u8 	%rs2, [%rd24+-2];
	st.u8 	[%rd25+1], %rs2;
	ld.u8 	%rs3, [%rd24+-1];
	st.u8 	[%rd25+2], %rs3;
	ld.u8 	%rs4, [%rd24];
	st.u8 	[%rd25+3], %rs4;
	add.s64 	%rd34, %rd34, 4;
	cvt.u32.u64 	%r24, %rd34;
	setp.ne.s32 	%p3, %r13, %r24;
	@%p3 bra 	$L__BB3_3;
$L__BB3_4:
	setp.eq.s32 	%p4, %r25, 0;
	@%p4 bra 	$L__BB3_7;
// %bb.5:
	cvt.u64.u32 	%rd26, %r24;
	add.s64 	%rd27, %rd26, %rd30;
	add.s64 	%rd36, %rd27, 24;
	add.s64 	%rd35, %rd19, %rd26;
$L__BB3_6:                              // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	ld.u8 	%rs5, [%rd35];
	st.u8 	[%rd36], %rs5;
	add.s64 	%rd36, %rd36, 1;
	add.s64 	%rd35, %rd35, 1;
	add.s32 	%r25, %r25, -1;
	setp.ne.s32 	%p5, %r25, 0;
	@%p5 bra 	$L__BB3_6;
$L__BB3_7:
	mov.u32 	%r26, 0;
	mov.u64 	%rd38, 0;
	mov.u32 	%r15, %tid.x;
	and.b32  	%r6, %r15, 31;
	add.s64 	%rd31, %rd30, 4;
	add.s64 	%rd29, %rd30, 8;
	mov.u32 	%r21, 1;
	mov.u32 	%r20, 42;
	bra.uni 	$L__BB3_8;
$L__BB3_11:                             //   in Loop: Header=BB3_8 Depth=1
	bar.warp.sync 	%r8;
	add.s32 	%r26, %r26, 1;
	setp.ne.s32 	%p11, %r26, 32;
	@%p11 bra 	$L__BB3_8;
	bra.uni 	$L__BB3_12;
$L__BB3_8:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB3_9 Depth 2
	// begin inline asm
	activemask.b32 %r8;
	// end inline asm
	shr.u32 	%r17, %r8, %r26;
	and.b32  	%r18, %r17, 1;
	setp.eq.b32 	%p6, %r18, 1;
	not.pred 	%p7, %p6;
	setp.ne.s32 	%p8, %r6, %r26;
	or.pred  	%p9, %p8, %p7;
	@%p9 bra 	$L__BB3_11;
$L__BB3_9:                              //   Parent Loop BB3_8 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	atom.cas.b32 	%r19, [%rd29], 0, 1;
	setp.eq.s32 	%p10, %r19, 1;
	@%p10 bra 	$L__BB3_9;
// %bb.10:                              //   in Loop: Header=BB3_8 Depth=1
	st.u32 	[%rd30+12], %r21;
	st.u64 	[%rd30+16], %rd18;
	// begin inline asm
	.reg .pred p0;                   
	membar.sys;                      
	st.global.u32 [%rd30], 1;           
	spin_wait:                       
	membar.sys;                      
	ld.global.u32 %r20, [%rd31];          
	setp.eq.u32 p0, %r20, 0;           
	@p0 bra spin_wait;               
	st.global.u32 [%rd31], 0;           
	membar.sys;                      
	
	// end inline asm
	ld.u64 	%rd38, [%rd30+2147483680];
	atom.exch.b32 	%r22, [%rd29], 0;
	bra.uni 	$L__BB3_11;
$L__BB3_12:
	st.param.b64 	[func_retval0+0], %rd38;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0002    // -- Begin function _bpf_helper_ext_0002
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0002(
	.param .b64 _bpf_helper_ext_0002_param_0,
	.param .b64 _bpf_helper_ext_0002_param_1,
	.param .b64 _bpf_helper_ext_0002_param_2,
	.param .b64 _bpf_helper_ext_0002_param_3,
	.param .b64 _bpf_helper_ext_0002_param_4
)                                       // @_bpf_helper_ext_0002
{
	.reg .pred 	%p<17>;
	.reg .b16 	%rs<11>;
	.reg .b32 	%r<39>;
	.reg .b64 	%rd<66>;

// %bb.0:
	ld.param.u64 	%rd30, [_bpf_helper_ext_0002_param_0];
	ld.const.u64 	%rd52, [constData];
	shl.b64 	%rd34, %rd30, 4;
	mov.u64 	%rd35, map_info;
	add.s64 	%rd36, %rd35, %rd34;
	ld.const.u32 	%r15, [%rd36+4];
	setp.lt.s32 	%p1, %r15, 1;
	@%p1 bra 	$L__BB4_7;
// %bb.1:
	ld.param.u64 	%rd31, [_bpf_helper_ext_0002_param_1];
	cvt.u64.u32 	%rd3, %r15;
	cvt.u32.u64 	%r17, %rd3;
	and.b32  	%r35, %r17, 3;
	setp.lt.u32 	%p2, %r17, 4;
	mov.u32 	%r34, 0;
	@%p2 bra 	$L__BB4_4;
// %bb.2:
	add.s64 	%rd2, %rd52, 24;
	and.b64  	%rd4, %rd3, 4294967292;
	add.s64 	%rd5, %rd31, 3;
	mov.u64 	%rd58, 0;
	cvt.u32.u64 	%r18, %rd4;
$L__BB4_3:                              // =>This Inner Loop Header: Depth=1
	add.s64 	%rd38, %rd5, %rd58;
	ld.u8 	%rs1, [%rd38+-3];
	add.s64 	%rd39, %rd2, %rd58;
	st.u8 	[%rd39], %rs1;
	ld.u8 	%rs2, [%rd38+-2];
	st.u8 	[%rd39+1], %rs2;
	ld.u8 	%rs3, [%rd38+-1];
	st.u8 	[%rd39+2], %rs3;
	ld.u8 	%rs4, [%rd38];
	st.u8 	[%rd39+3], %rs4;
	add.s64 	%rd58, %rd58, 4;
	cvt.u32.u64 	%r34, %rd58;
	setp.ne.s32 	%p3, %r18, %r34;
	@%p3 bra 	$L__BB4_3;
$L__BB4_4:
	setp.eq.s32 	%p4, %r35, 0;
	@%p4 bra 	$L__BB4_7;
// %bb.5:
	cvt.u64.u32 	%rd40, %r34;
	add.s64 	%rd41, %rd40, %rd52;
	add.s64 	%rd60, %rd41, 24;
	add.s64 	%rd59, %rd31, %rd40;
$L__BB4_6:                              // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	ld.u8 	%rs5, [%rd59];
	st.u8 	[%rd60], %rs5;
	add.s64 	%rd60, %rd60, 1;
	add.s64 	%rd59, %rd59, 1;
	add.s32 	%r35, %r35, -1;
	setp.ne.s32 	%p5, %r35, 0;
	@%p5 bra 	$L__BB4_6;
$L__BB4_7:
	ld.param.u64 	%rd33, [_bpf_helper_ext_0002_param_3];
	ld.const.u32 	%r19, [%rd36+8];
	setp.lt.s32 	%p6, %r19, 1;
	@%p6 bra 	$L__BB4_14;
// %bb.8:
	ld.param.u64 	%rd32, [_bpf_helper_ext_0002_param_2];
	cvt.u64.u32 	%rd15, %r19;
	cvt.u32.u64 	%r21, %rd15;
	and.b32  	%r37, %r21, 3;
	setp.lt.u32 	%p7, %r21, 4;
	mov.u32 	%r36, 0;
	@%p7 bra 	$L__BB4_11;
// %bb.9:
	add.s64 	%rd14, %rd52, 1073741848;
	and.b64  	%rd16, %rd15, 4294967292;
	add.s64 	%rd17, %rd32, 3;
	mov.u64 	%rd61, 0;
	cvt.u32.u64 	%r22, %rd16;
$L__BB4_10:                             // =>This Inner Loop Header: Depth=1
	add.s64 	%rd46, %rd17, %rd61;
	ld.u8 	%rs6, [%rd46+-3];
	add.s64 	%rd47, %rd14, %rd61;
	st.u8 	[%rd47], %rs6;
	ld.u8 	%rs7, [%rd46+-2];
	st.u8 	[%rd47+1], %rs7;
	ld.u8 	%rs8, [%rd46+-1];
	st.u8 	[%rd47+2], %rs8;
	ld.u8 	%rs9, [%rd46];
	st.u8 	[%rd47+3], %rs9;
	add.s64 	%rd61, %rd61, 4;
	cvt.u32.u64 	%r36, %rd61;
	setp.ne.s32 	%p8, %r22, %r36;
	@%p8 bra 	$L__BB4_10;
$L__BB4_11:
	setp.eq.s32 	%p9, %r37, 0;
	@%p9 bra 	$L__BB4_14;
// %bb.12:
	cvt.u64.u32 	%rd48, %r36;
	add.s64 	%rd49, %rd48, %rd52;
	add.s64 	%rd63, %rd49, 1073741848;
	add.s64 	%rd62, %rd32, %rd48;
$L__BB4_13:                             // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	ld.u8 	%rs10, [%rd62];
	st.u8 	[%rd63], %rs10;
	add.s64 	%rd63, %rd63, 1;
	add.s64 	%rd62, %rd62, 1;
	add.s32 	%r37, %r37, -1;
	setp.ne.s32 	%p10, %r37, 0;
	@%p10 bra 	$L__BB4_13;
$L__BB4_14:
	mov.u32 	%r38, 0;
	mov.u64 	%rd65, 0;
	st.u64 	[%rd52+2147483672], %rd33;
	mov.u32 	%r24, %tid.x;
	and.b32  	%r11, %r24, 31;
	add.s64 	%rd53, %rd52, 4;
	add.s64 	%rd51, %rd52, 8;
	mov.u32 	%r30, 2;
	mov.u32 	%r29, 42;
	bra.uni 	$L__BB4_15;
$L__BB4_18:                             //   in Loop: Header=BB4_15 Depth=1
	bar.warp.sync 	%r13;
	add.s32 	%r38, %r38, 1;
	setp.ne.s32 	%p16, %r38, 32;
	@%p16 bra 	$L__BB4_15;
	bra.uni 	$L__BB4_19;
$L__BB4_15:                             // =>This Loop Header: Depth=1
                                        //     Child Loop BB4_16 Depth 2
	// begin inline asm
	activemask.b32 %r13;
	// end inline asm
	shr.u32 	%r26, %r13, %r38;
	and.b32  	%r27, %r26, 1;
	setp.eq.b32 	%p11, %r27, 1;
	not.pred 	%p12, %p11;
	setp.ne.s32 	%p13, %r11, %r38;
	or.pred  	%p14, %p13, %p12;
	@%p14 bra 	$L__BB4_18;
$L__BB4_16:                             //   Parent Loop BB4_15 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	atom.cas.b32 	%r28, [%rd51], 0, 1;
	setp.eq.s32 	%p15, %r28, 1;
	@%p15 bra 	$L__BB4_16;
// %bb.17:                              //   in Loop: Header=BB4_15 Depth=1
	st.u32 	[%rd52+12], %r30;
	st.u64 	[%rd52+16], %rd30;
	// begin inline asm
	.reg .pred p0;                   
	membar.sys;                      
	st.global.u32 [%rd52], 1;           
	spin_wait:                       
	membar.sys;                      
	ld.global.u32 %r29, [%rd53];          
	setp.eq.u32 p0, %r29, 0;           
	@p0 bra spin_wait;               
	st.global.u32 [%rd53], 0;           
	membar.sys;                      
	
	// end inline asm
	ld.u64 	%rd65, [%rd52+2147483680];
	atom.exch.b32 	%r31, [%rd51], 0;
	bra.uni 	$L__BB4_18;
$L__BB4_19:
	cvt.s64.s32 	%rd55, %rd65;
	st.param.b64 	[func_retval0+0], %rd55;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0003    // -- Begin function _bpf_helper_ext_0003
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0003(
	.param .b64 _bpf_helper_ext_0003_param_0,
	.param .b64 _bpf_helper_ext_0003_param_1,
	.param .b64 _bpf_helper_ext_0003_param_2,
	.param .b64 _bpf_helper_ext_0003_param_3,
	.param .b64 _bpf_helper_ext_0003_param_4
)                                       // @_bpf_helper_ext_0003
{
	.reg .pred 	%p<12>;
	.reg .b16 	%rs<6>;
	.reg .b32 	%r<27>;
	.reg .b64 	%rd<40>;

// %bb.0:
	ld.param.u64 	%rd18, [_bpf_helper_ext_0003_param_0];
	ld.const.u64 	%rd30, [constData];
	shl.b64 	%rd20, %rd18, 4;
	mov.u64 	%rd21, map_info;
	add.s64 	%rd22, %rd21, %rd20;
	ld.const.u32 	%r10, [%rd22+4];
	setp.lt.s32 	%p1, %r10, 1;
	@%p1 bra 	$L__BB5_7;
// %bb.1:
	ld.param.u64 	%rd19, [_bpf_helper_ext_0003_param_1];
	cvt.u64.u32 	%rd3, %r10;
	cvt.u32.u64 	%r12, %rd3;
	and.b32  	%r25, %r12, 3;
	setp.lt.u32 	%p2, %r12, 4;
	mov.u32 	%r24, 0;
	@%p2 bra 	$L__BB5_4;
// %bb.2:
	add.s64 	%rd2, %rd30, 24;
	and.b64  	%rd4, %rd3, 4294967292;
	add.s64 	%rd5, %rd19, 3;
	mov.u64 	%rd35, 0;
	cvt.u32.u64 	%r13, %rd4;
$L__BB5_3:                              // =>This Inner Loop Header: Depth=1
	add.s64 	%rd24, %rd5, %rd35;
	ld.u8 	%rs1, [%rd24+-3];
	add.s64 	%rd25, %rd2, %rd35;
	st.u8 	[%rd25], %rs1;
	ld.u8 	%rs2, [%rd24+-2];
	st.u8 	[%rd25+1], %rs2;
	ld.u8 	%rs3, [%rd24+-1];
	st.u8 	[%rd25+2], %rs3;
	ld.u8 	%rs4, [%rd24];
	st.u8 	[%rd25+3], %rs4;
	add.s64 	%rd35, %rd35, 4;
	cvt.u32.u64 	%r24, %rd35;
	setp.ne.s32 	%p3, %r13, %r24;
	@%p3 bra 	$L__BB5_3;
$L__BB5_4:
	setp.eq.s32 	%p4, %r25, 0;
	@%p4 bra 	$L__BB5_7;
// %bb.5:
	cvt.u64.u32 	%rd26, %r24;
	add.s64 	%rd27, %rd26, %rd30;
	add.s64 	%rd37, %rd27, 24;
	add.s64 	%rd36, %rd19, %rd26;
$L__BB5_6:                              // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	ld.u8 	%rs5, [%rd36];
	st.u8 	[%rd37], %rs5;
	add.s64 	%rd37, %rd37, 1;
	add.s64 	%rd36, %rd36, 1;
	add.s32 	%r25, %r25, -1;
	setp.ne.s32 	%p5, %r25, 0;
	@%p5 bra 	$L__BB5_6;
$L__BB5_7:
	mov.u32 	%r26, 0;
	mov.u64 	%rd39, 0;
	mov.u32 	%r15, %tid.x;
	and.b32  	%r6, %r15, 31;
	add.s64 	%rd31, %rd30, 4;
	add.s64 	%rd29, %rd30, 8;
	mov.u32 	%r21, 3;
	mov.u32 	%r20, 42;
	bra.uni 	$L__BB5_8;
$L__BB5_11:                             //   in Loop: Header=BB5_8 Depth=1
	bar.warp.sync 	%r8;
	add.s32 	%r26, %r26, 1;
	setp.ne.s32 	%p11, %r26, 32;
	@%p11 bra 	$L__BB5_8;
	bra.uni 	$L__BB5_12;
$L__BB5_8:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB5_9 Depth 2
	// begin inline asm
	activemask.b32 %r8;
	// end inline asm
	shr.u32 	%r17, %r8, %r26;
	and.b32  	%r18, %r17, 1;
	setp.eq.b32 	%p6, %r18, 1;
	not.pred 	%p7, %p6;
	setp.ne.s32 	%p8, %r6, %r26;
	or.pred  	%p9, %p8, %p7;
	@%p9 bra 	$L__BB5_11;
$L__BB5_9:                              //   Parent Loop BB5_8 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	atom.cas.b32 	%r19, [%rd29], 0, 1;
	setp.eq.s32 	%p10, %r19, 1;
	@%p10 bra 	$L__BB5_9;
// %bb.10:                              //   in Loop: Header=BB5_8 Depth=1
	st.u32 	[%rd30+12], %r21;
	st.u64 	[%rd30+16], %rd18;
	// begin inline asm
	.reg .pred p0;                   
	membar.sys;                      
	st.global.u32 [%rd30], 1;           
	spin_wait:                       
	membar.sys;                      
	ld.global.u32 %r20, [%rd31];          
	setp.eq.u32 p0, %r20, 0;           
	@p0 bra spin_wait;               
	st.global.u32 [%rd31], 0;           
	membar.sys;                      
	
	// end inline asm
	ld.u64 	%rd39, [%rd30+2147483680];
	atom.exch.b32 	%r22, [%rd29], 0;
	bra.uni 	$L__BB5_11;
$L__BB5_12:
	cvt.s64.s32 	%rd33, %rd39;
	st.param.b64 	[func_retval0+0], %rd33;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0006    // -- Begin function _bpf_helper_ext_0006
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0006(
	.param .b64 _bpf_helper_ext_0006_param_0,
	.param .b64 _bpf_helper_ext_0006_param_1,
	.param .b64 _bpf_helper_ext_0006_param_2,
	.param .b64 _bpf_helper_ext_0006_param_3,
	.param .b64 _bpf_helper_ext_0006_param_4
)                                       // @_bpf_helper_ext_0006
{
	.reg .pred 	%p<9>;
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<29>;

// %bb.0:
	ld.param.u64 	%rd13, [_bpf_helper_ext_0006_param_4];
	ld.param.u64 	%rd12, [_bpf_helper_ext_0006_param_3];
	ld.param.u64 	%rd11, [_bpf_helper_ext_0006_param_2];
	ld.param.u64 	%rd10, [_bpf_helper_ext_0006_param_1];
	ld.const.u64 	%rd1, [constData];
	setp.eq.s64 	%p1, %rd10, 0;
	@%p1 bra 	$L__BB6_3;
// %bb.1:
	ld.param.u64 	%rd9, [_bpf_helper_ext_0006_param_0];
	add.s64 	%rd2, %rd1, 24;
	mov.u64 	%rd28, 0;
$L__BB6_2:                              // =>This Inner Loop Header: Depth=1
	add.s64 	%rd15, %rd9, %rd28;
	ld.u8 	%rs1, [%rd15];
	add.s64 	%rd16, %rd2, %rd28;
	st.u8 	[%rd16], %rs1;
	add.s64 	%rd17, %rd28, 1;
	and.b64  	%rd28, %rd17, 4294967295;
	setp.lt.u64 	%p2, %rd28, %rd10;
	@%p2 bra 	$L__BB6_2;
$L__BB6_3:
	st.u32 	[%rd1+1024], %rd10;
	st.u64 	[%rd1+1032], %rd11;
	st.u64 	[%rd1+1040], %rd12;
	st.u64 	[%rd1+1048], %rd13;
	mov.u32 	%r6, %tid.x;
	and.b32  	%r1, %r6, 31;
	add.s64 	%rd21, %rd1, 4;
	mov.u32 	%r14, 0;
	mov.u64 	%rd27, 0;
	add.s64 	%rd19, %rd1, 8;
	mov.u32 	%r12, 6;
	mov.u32 	%r11, 42;
	bra.uni 	$L__BB6_4;
$L__BB6_7:                              //   in Loop: Header=BB6_4 Depth=1
	bar.warp.sync 	%r3;
	add.s32 	%r14, %r14, 1;
	setp.ne.s32 	%p8, %r14, 32;
	@%p8 bra 	$L__BB6_4;
	bra.uni 	$L__BB6_8;
$L__BB6_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB6_5 Depth 2
	// begin inline asm
	activemask.b32 %r3;
	// end inline asm
	shr.u32 	%r8, %r3, %r14;
	and.b32  	%r9, %r8, 1;
	setp.eq.b32 	%p3, %r9, 1;
	not.pred 	%p4, %p3;
	setp.ne.s32 	%p5, %r1, %r14;
	or.pred  	%p6, %p5, %p4;
	@%p6 bra 	$L__BB6_7;
$L__BB6_5:                              //   Parent Loop BB6_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	atom.cas.b32 	%r10, [%rd19], 0, 1;
	setp.eq.s32 	%p7, %r10, 1;
	@%p7 bra 	$L__BB6_5;
// %bb.6:                               //   in Loop: Header=BB6_4 Depth=1
	st.u32 	[%rd1+12], %r12;
	mov.u64 	%rd22, 0;
	st.u64 	[%rd1+16], %rd22;
	// begin inline asm
	.reg .pred p0;                   
	membar.sys;                      
	st.global.u32 [%rd1], 1;           
	spin_wait:                       
	membar.sys;                      
	ld.global.u32 %r11, [%rd21];          
	setp.eq.u32 p0, %r11, 0;           
	@p0 bra spin_wait;               
	st.global.u32 [%rd21], 0;           
	membar.sys;                      
	
	// end inline asm
	ld.u64 	%rd27, [%rd1+2147483680];
	atom.exch.b32 	%r13, [%rd19], 0;
	bra.uni 	$L__BB6_7;
$L__BB6_8:
	cvt.s64.s32 	%rd24, %rd27;
	st.param.b64 	[func_retval0+0], %rd24;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0014    // -- Begin function _bpf_helper_ext_0014
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0014(
	.param .b64 _bpf_helper_ext_0014_param_0,
	.param .b64 _bpf_helper_ext_0014_param_1,
	.param .b64 _bpf_helper_ext_0014_param_2,
	.param .b64 _bpf_helper_ext_0014_param_3,
	.param .b64 _bpf_helper_ext_0014_param_4
)                                       // @_bpf_helper_ext_0014
{
	.reg .pred 	%p<7>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<14>;

// %bb.0:
	ld.const.u64 	%rd8, [constData];
	mov.u32 	%r6, %tid.x;
	and.b32  	%r1, %r6, 31;
	add.s64 	%rd9, %rd8, 4;
	mov.u32 	%r14, 0;
	mov.u64 	%rd6, 0;
	add.s64 	%rd7, %rd8, 8;
	mov.u32 	%r12, 14;
	mov.u32 	%r11, 42;
	mov.u64 	%rd13, %rd6;
	bra.uni 	$L__BB7_1;
$L__BB7_4:                              //   in Loop: Header=BB7_1 Depth=1
	bar.warp.sync 	%r3;
	add.s32 	%r14, %r14, 1;
	setp.ne.s32 	%p6, %r14, 32;
	@%p6 bra 	$L__BB7_1;
	bra.uni 	$L__BB7_5;
$L__BB7_1:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB7_2 Depth 2
	// begin inline asm
	activemask.b32 %r3;
	// end inline asm
	shr.u32 	%r8, %r3, %r14;
	and.b32  	%r9, %r8, 1;
	setp.eq.b32 	%p1, %r9, 1;
	not.pred 	%p2, %p1;
	setp.ne.s32 	%p3, %r1, %r14;
	or.pred  	%p4, %p3, %p2;
	@%p4 bra 	$L__BB7_4;
$L__BB7_2:                              //   Parent Loop BB7_1 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	atom.cas.b32 	%r10, [%rd7], 0, 1;
	setp.eq.s32 	%p5, %r10, 1;
	@%p5 bra 	$L__BB7_2;
// %bb.3:                               //   in Loop: Header=BB7_1 Depth=1
	st.u32 	[%rd8+12], %r12;
	st.u64 	[%rd8+16], %rd6;
	// begin inline asm
	.reg .pred p0;                   
	membar.sys;                      
	st.global.u32 [%rd8], 1;           
	spin_wait:                       
	membar.sys;                      
	ld.global.u32 %r11, [%rd9];          
	setp.eq.u32 p0, %r11, 0;           
	@p0 bra spin_wait;               
	st.global.u32 [%rd9], 0;           
	membar.sys;                      
	
	// end inline asm
	ld.u64 	%rd13, [%rd8+2147483680];
	atom.exch.b32 	%r13, [%rd7], 0;
	bra.uni 	$L__BB7_4;
$L__BB7_5:
	st.param.b64 	[func_retval0+0], %rd13;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0501    // -- Begin function _bpf_helper_ext_0501
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0501(
	.param .b64 _bpf_helper_ext_0501_param_0,
	.param .b64 _bpf_helper_ext_0501_param_1,
	.param .b64 _bpf_helper_ext_0501_param_2,
	.param .b64 _bpf_helper_ext_0501_param_3,
	.param .b64 _bpf_helper_ext_0501_param_4
)                                       // @_bpf_helper_ext_0501
{
	.reg .pred 	%p<9>;
	.reg .b16 	%rs<6>;
	.reg .b32 	%r<15>;
	.reg .b64 	%rd<28>;

// %bb.0:
	ld.param.u64 	%rd11, [_bpf_helper_ext_0501_param_0];
	ld.const.u64 	%rd19, [constData];
	add.s64 	%rd2, %rd19, 24;
	ld.u8 	%rs5, [%rd11];
	setp.eq.s16 	%p1, %rs5, 0;
	mov.u64 	%rd27, 0;
	mov.u64 	%rd25, %rd27;
	@%p1 bra 	$L__BB8_3;
// %bb.1:
	add.s64 	%rd3, %rd11, 1;
	mov.u64 	%rd25, 0;
$L__BB8_2:                              // =>This Inner Loop Header: Depth=1
	add.s64 	%rd14, %rd2, %rd25;
	st.u8 	[%rd14], %rs5;
	add.s64 	%rd15, %rd3, %rd25;
	ld.u8 	%rs5, [%rd15];
	setp.ne.s16 	%p2, %rs5, 0;
	add.s64 	%rd25, %rd25, 1;
	@%p2 bra 	$L__BB8_2;
$L__BB8_3:
	add.s64 	%rd17, %rd2, %rd25;
	mov.u16 	%rs4, 0;
	st.u8 	[%rd17], %rs4;
	mov.u32 	%r6, %tid.x;
	and.b32  	%r1, %r6, 31;
	add.s64 	%rd20, %rd19, 4;
	mov.u32 	%r14, 0;
	add.s64 	%rd18, %rd19, 8;
	mov.u32 	%r12, 501;
	mov.u32 	%r11, 42;
	bra.uni 	$L__BB8_4;
$L__BB8_7:                              //   in Loop: Header=BB8_4 Depth=1
	bar.warp.sync 	%r3;
	add.s32 	%r14, %r14, 1;
	setp.ne.s32 	%p8, %r14, 32;
	@%p8 bra 	$L__BB8_4;
	bra.uni 	$L__BB8_8;
$L__BB8_4:                              // =>This Loop Header: Depth=1
                                        //     Child Loop BB8_5 Depth 2
	// begin inline asm
	activemask.b32 %r3;
	// end inline asm
	shr.u32 	%r8, %r3, %r14;
	and.b32  	%r9, %r8, 1;
	setp.eq.b32 	%p3, %r9, 1;
	not.pred 	%p4, %p3;
	setp.ne.s32 	%p5, %r1, %r14;
	or.pred  	%p6, %p5, %p4;
	@%p6 bra 	$L__BB8_7;
$L__BB8_5:                              //   Parent Loop BB8_4 Depth=1
                                        // =>  This Inner Loop Header: Depth=2
	atom.cas.b32 	%r10, [%rd18], 0, 1;
	setp.eq.s32 	%p7, %r10, 1;
	@%p7 bra 	$L__BB8_5;
// %bb.6:                               //   in Loop: Header=BB8_4 Depth=1
	st.u32 	[%rd19+12], %r12;
	mov.u64 	%rd21, 0;
	st.u64 	[%rd19+16], %rd21;
	// begin inline asm
	.reg .pred p0;                   
	membar.sys;                      
	st.global.u32 [%rd19], 1;           
	spin_wait:                       
	membar.sys;                      
	ld.global.u32 %r11, [%rd20];          
	setp.eq.u32 p0, %r11, 0;           
	@p0 bra spin_wait;               
	st.global.u32 [%rd20], 0;           
	membar.sys;                      
	
	// end inline asm
	ld.u64 	%rd27, [%rd19+2147483680];
	atom.exch.b32 	%r13, [%rd18], 0;
	bra.uni 	$L__BB8_7;
$L__BB8_8:
	cvt.s64.s32 	%rd23, %rd27;
	st.param.b64 	[func_retval0+0], %rd23;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0502    // -- Begin function _bpf_helper_ext_0502
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0502(
	.param .b64 _bpf_helper_ext_0502_param_0,
	.param .b64 _bpf_helper_ext_0502_param_1,
	.param .b64 _bpf_helper_ext_0502_param_2,
	.param .b64 _bpf_helper_ext_0502_param_3,
	.param .b64 _bpf_helper_ext_0502_param_4
)                                       // @_bpf_helper_ext_0502
{
	.reg .b64 	%rd<2>;

// %bb.0:
	// begin inline asm
	mov.u64 %rd1, %globaltimer;
	// end inline asm
	st.param.b64 	[func_retval0+0], %rd1;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0503    // -- Begin function _bpf_helper_ext_0503
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0503(
	.param .b64 _bpf_helper_ext_0503_param_0,
	.param .b64 _bpf_helper_ext_0503_param_1,
	.param .b64 _bpf_helper_ext_0503_param_2,
	.param .b64 _bpf_helper_ext_0503_param_3,
	.param .b64 _bpf_helper_ext_0503_param_4
)                                       // @_bpf_helper_ext_0503
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<8>;

// %bb.0:
	ld.param.u64 	%rd1, [_bpf_helper_ext_0503_param_0];
	ld.param.u64 	%rd2, [_bpf_helper_ext_0503_param_1];
	mov.u32 	%r1, %ctaid.x;
	cvt.u64.u32 	%rd3, %r1;
	ld.param.u64 	%rd4, [_bpf_helper_ext_0503_param_2];
	st.u64 	[%rd1], %rd3;
	mov.u32 	%r2, %ctaid.y;
	cvt.u64.u32 	%rd5, %r2;
	st.u64 	[%rd2], %rd5;
	mov.u32 	%r3, %ctaid.z;
	cvt.u64.u32 	%rd6, %r3;
	st.u64 	[%rd4], %rd6;
	mov.u64 	%rd7, 0;
	st.param.b64 	[func_retval0+0], %rd7;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0504    // -- Begin function _bpf_helper_ext_0504
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0504(
	.param .b64 _bpf_helper_ext_0504_param_0,
	.param .b64 _bpf_helper_ext_0504_param_1,
	.param .b64 _bpf_helper_ext_0504_param_2,
	.param .b64 _bpf_helper_ext_0504_param_3,
	.param .b64 _bpf_helper_ext_0504_param_4
)                                       // @_bpf_helper_ext_0504
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<8>;

// %bb.0:
	ld.param.u64 	%rd1, [_bpf_helper_ext_0504_param_0];
	ld.param.u64 	%rd2, [_bpf_helper_ext_0504_param_1];
	mov.u32 	%r1, %ntid.x;
	cvt.u64.u32 	%rd3, %r1;
	ld.param.u64 	%rd4, [_bpf_helper_ext_0504_param_2];
	st.u64 	[%rd1], %rd3;
	mov.u32 	%r2, %ntid.y;
	cvt.u64.u32 	%rd5, %r2;
	st.u64 	[%rd2], %rd5;
	mov.u32 	%r3, %ntid.z;
	cvt.u64.u32 	%rd6, %r3;
	st.u64 	[%rd4], %rd6;
	mov.u64 	%rd7, 0;
	st.param.b64 	[func_retval0+0], %rd7;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0505    // -- Begin function _bpf_helper_ext_0505
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0505(
	.param .b64 _bpf_helper_ext_0505_param_0,
	.param .b64 _bpf_helper_ext_0505_param_1,
	.param .b64 _bpf_helper_ext_0505_param_2,
	.param .b64 _bpf_helper_ext_0505_param_3,
	.param .b64 _bpf_helper_ext_0505_param_4
)                                       // @_bpf_helper_ext_0505
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<8>;

// %bb.0:
	ld.param.u64 	%rd1, [_bpf_helper_ext_0505_param_0];
	ld.param.u64 	%rd2, [_bpf_helper_ext_0505_param_1];
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32 	%rd3, %r1;
	ld.param.u64 	%rd4, [_bpf_helper_ext_0505_param_2];
	st.u64 	[%rd1], %rd3;
	mov.u32 	%r2, %tid.y;
	cvt.u64.u32 	%rd5, %r2;
	st.u64 	[%rd2], %rd5;
	mov.u32 	%r3, %tid.z;
	cvt.u64.u32 	%rd6, %r3;
	st.u64 	[%rd4], %rd6;
	mov.u64 	%rd7, 0;
	st.param.b64 	[func_retval0+0], %rd7;
	ret;
                                        // -- End function
}
)";
