static const char TRAMPOLINE_PTX[] = R"(
//
// Generated by LLVM NVPTX Back-End
//

.version 8.1
.target sm_90
.address_size 64

	// .globl	spin_lock               // -- Begin function spin_lock
.extern .func  (.param .b32 func_retval0) vprintf
(
	.param .b64 vprintf_param_0,
	.param .b64 vprintf_param_1
)
;
.visible .const .align 8 .u64 constData;
.visible .const .align 4 .b8 map_info[4096];
.global .align 1 .b8 _$_str[45] = {107, 101, 114, 110, 101, 108, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 101, 110, 116, 101, 114, 101, 100, 44, 32, 109, 101, 109, 61, 37, 108, 120, 44, 32, 109, 101, 109, 115, 122, 61, 37, 108, 100, 10, 0};
.global .align 1 .b8 __const_$_bpf_main_$_buf[16] = {97, 97, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
.global .align 1 .b8 _$_str1[32] = {115, 101, 116, 117, 112, 32, 102, 117, 110, 99, 116, 105, 111, 110, 44, 32, 99, 111, 110, 115, 116, 32, 100, 97, 116, 97, 61, 37, 108, 120, 10, 0};
.global .align 1 .b8 __const_$_bpf_main_$_msg[26] = {77, 101, 115, 115, 97, 103, 101, 32, 102, 114, 111, 109, 32, 98, 112, 102, 58, 32, 37, 100, 44, 32, 37, 108, 120, 0};
.global .align 1 .b8 _$_str2[11] = {99, 97, 108, 108, 32, 100, 111, 110, 101, 10, 0};
.global .align 1 .b8 _$_str3[23] = {103, 111, 116, 32, 114, 101, 115, 112, 111, 110, 115, 101, 32, 37, 100, 32, 97, 116, 32, 37, 100, 10, 0};
                                        // @spin_lock
.visible .func spin_lock(
	.param .b64 spin_lock_param_0
)
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<2>;

// %bb.0:
	ld.param.u64 	%rd1, [spin_lock_param_0];
$L__BB0_1:                              // =>This Inner Loop Header: Depth=1
	atom.cas.b32 	%r1, [%rd1], 0, 1;
	setp.eq.s32 	%p1, %r1, 1;
	@%p1 bra 	$L__BB0_1;
// %bb.2:
	ret;
                                        // -- End function
}
	// .globl	spin_unlock             // -- Begin function spin_unlock
.visible .func spin_unlock(
	.param .b64 spin_unlock_param_0
)                                       // @spin_unlock
{
	.reg .b32 	%r<2>;
	.reg .b64 	%rd<2>;

// %bb.0:
	ld.param.u64 	%rd1, [spin_unlock_param_0];
	atom.exch.b32 	%r1, [%rd1], 0;
	ret;
                                        // -- End function
}
	// .globl	make_helper_call        // -- Begin function make_helper_call
.visible .func  (.param .align 8 .b8 func_retval0[8]) make_helper_call(
	.param .b64 make_helper_call_param_0,
	.param .b32 make_helper_call_param_1
)                                       // @make_helper_call
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<8>;

// %bb.0:
	ld.param.u32 	%r1, [make_helper_call_param_1];
	ld.param.u64 	%rd2, [make_helper_call_param_0];
	ld.const.u64 	%rd4, [constData];
	add.s64 	%rd3, %rd4, 8;
$L__BB2_1:                              // =>This Inner Loop Header: Depth=1
	atom.cas.b32 	%r2, [%rd3], 0, 1;
	setp.eq.s32 	%p1, %r2, 1;
	@%p1 bra 	$L__BB2_1;
// %bb.2:
	st.u32 	[%rd4+12], %r1;
	st.u64 	[%rd4+16], %rd2;
	add.s64 	%rd5, %rd4, 4;
	mov.u32 	%r3, 42;
	// begin inline asm
	.reg .pred p0;                   
	membar.sys;                      
	st.global.u32 [%rd4], 1;           
	spin_wait:                       
	membar.sys;                      
	ld.global.u32 %r3, [%rd5];          
	setp.eq.u32 p0, %r3, 0;           
	@p0 bra spin_wait;               
	st.global.u32 [%rd5], 0;           
	membar.sys;                      
	
	// end inline asm
	ld.u64 	%rd6, [%rd4+2147483680];
	atom.exch.b32 	%r4, [%rd3], 0;
	st.param.b64 	[func_retval0+0], %rd6;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0001    // -- Begin function _bpf_helper_ext_0001
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0001(
	.param .b64 _bpf_helper_ext_0001_param_0,
	.param .b64 _bpf_helper_ext_0001_param_1,
	.param .b64 _bpf_helper_ext_0001_param_2,
	.param .b64 _bpf_helper_ext_0001_param_3,
	.param .b64 _bpf_helper_ext_0001_param_4
)                                       // @_bpf_helper_ext_0001
{
	.reg .pred 	%p<7>;
	.reg .b16 	%rs<6>;
	.reg .b32 	%r<16>;
	.reg .b64 	%rd<32>;

// %bb.0:
	ld.param.u64 	%rd14, [_bpf_helper_ext_0001_param_0];
	ld.const.u64 	%rd25, [constData];
	shl.b64 	%rd16, %rd14, 4;
	mov.u64 	%rd17, map_info;
	add.s64 	%rd18, %rd17, %rd16;
	ld.const.u32 	%r6, [%rd18+4];
	setp.lt.s32 	%p1, %r6, 1;
	@%p1 bra 	$L__BB3_7;
// %bb.1:
	ld.param.u64 	%rd15, [_bpf_helper_ext_0001_param_1];
	cvt.u64.u32 	%rd3, %r6;
	cvt.u32.u64 	%r8, %rd3;
	and.b32  	%r15, %r8, 3;
	setp.lt.u32 	%p2, %r8, 4;
	mov.u32 	%r14, 0;
	@%p2 bra 	$L__BB3_4;
// %bb.2:
	add.s64 	%rd2, %rd25, 24;
	and.b64  	%rd4, %rd3, 4294967292;
	add.s64 	%rd5, %rd15, 3;
	mov.u64 	%rd29, 0;
	cvt.u32.u64 	%r9, %rd4;
$L__BB3_3:                              // =>This Inner Loop Header: Depth=1
	add.s64 	%rd20, %rd5, %rd29;
	ld.u8 	%rs1, [%rd20+-3];
	add.s64 	%rd21, %rd2, %rd29;
	st.u8 	[%rd21], %rs1;
	ld.u8 	%rs2, [%rd20+-2];
	st.u8 	[%rd21+1], %rs2;
	ld.u8 	%rs3, [%rd20+-1];
	st.u8 	[%rd21+2], %rs3;
	ld.u8 	%rs4, [%rd20];
	st.u8 	[%rd21+3], %rs4;
	add.s64 	%rd29, %rd29, 4;
	cvt.u32.u64 	%r14, %rd29;
	setp.ne.s32 	%p3, %r9, %r14;
	@%p3 bra 	$L__BB3_3;
$L__BB3_4:
	setp.eq.s32 	%p4, %r15, 0;
	@%p4 bra 	$L__BB3_7;
// %bb.5:
	cvt.u64.u32 	%rd22, %r14;
	add.s64 	%rd23, %rd22, %rd25;
	add.s64 	%rd31, %rd23, 24;
	add.s64 	%rd30, %rd15, %rd22;
$L__BB3_6:                              // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	ld.u8 	%rs5, [%rd30];
	st.u8 	[%rd31], %rs5;
	add.s64 	%rd31, %rd31, 1;
	add.s64 	%rd30, %rd30, 1;
	add.s32 	%r15, %r15, -1;
	setp.ne.s32 	%p5, %r15, 0;
	@%p5 bra 	$L__BB3_6;
$L__BB3_7:
	add.s64 	%rd24, %rd25, 8;
$L__BB3_8:                              // =>This Inner Loop Header: Depth=1
	atom.cas.b32 	%r10, [%rd24], 0, 1;
	setp.eq.s32 	%p6, %r10, 1;
	@%p6 bra 	$L__BB3_8;
// %bb.9:
	mov.u32 	%r12, 1;
	st.u32 	[%rd25+12], %r12;
	st.u64 	[%rd25+16], %rd14;
	add.s64 	%rd26, %rd25, 4;
	mov.u32 	%r11, 42;
	// begin inline asm
	.reg .pred p0;                   
	membar.sys;                      
	st.global.u32 [%rd25], 1;           
	spin_wait:                       
	membar.sys;                      
	ld.global.u32 %r11, [%rd26];          
	setp.eq.u32 p0, %r11, 0;           
	@p0 bra spin_wait;               
	st.global.u32 [%rd26], 0;           
	membar.sys;                      
	
	// end inline asm
	ld.u64 	%rd27, [%rd25+2147483680];
	atom.exch.b32 	%r13, [%rd24], 0;
	st.param.b64 	[func_retval0+0], %rd27;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0002    // -- Begin function _bpf_helper_ext_0002
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0002(
	.param .b64 _bpf_helper_ext_0002_param_0,
	.param .b64 _bpf_helper_ext_0002_param_1,
	.param .b64 _bpf_helper_ext_0002_param_2,
	.param .b64 _bpf_helper_ext_0002_param_3,
	.param .b64 _bpf_helper_ext_0002_param_4
)                                       // @_bpf_helper_ext_0002
{
	.reg .pred 	%p<12>;
	.reg .b16 	%rs<11>;
	.reg .b32 	%r<28>;
	.reg .b64 	%rd<57>;

// %bb.0:
	ld.param.u64 	%rd26, [_bpf_helper_ext_0002_param_0];
	ld.const.u64 	%rd47, [constData];
	shl.b64 	%rd30, %rd26, 4;
	mov.u64 	%rd31, map_info;
	add.s64 	%rd32, %rd31, %rd30;
	ld.const.u32 	%r11, [%rd32+4];
	setp.lt.s32 	%p1, %r11, 1;
	@%p1 bra 	$L__BB4_7;
// %bb.1:
	ld.param.u64 	%rd27, [_bpf_helper_ext_0002_param_1];
	cvt.u64.u32 	%rd3, %r11;
	cvt.u32.u64 	%r13, %rd3;
	and.b32  	%r25, %r13, 3;
	setp.lt.u32 	%p2, %r13, 4;
	mov.u32 	%r24, 0;
	@%p2 bra 	$L__BB4_4;
// %bb.2:
	add.s64 	%rd2, %rd47, 24;
	and.b64  	%rd4, %rd3, 4294967292;
	add.s64 	%rd5, %rd27, 3;
	mov.u64 	%rd51, 0;
	cvt.u32.u64 	%r14, %rd4;
$L__BB4_3:                              // =>This Inner Loop Header: Depth=1
	add.s64 	%rd34, %rd5, %rd51;
	ld.u8 	%rs1, [%rd34+-3];
	add.s64 	%rd35, %rd2, %rd51;
	st.u8 	[%rd35], %rs1;
	ld.u8 	%rs2, [%rd34+-2];
	st.u8 	[%rd35+1], %rs2;
	ld.u8 	%rs3, [%rd34+-1];
	st.u8 	[%rd35+2], %rs3;
	ld.u8 	%rs4, [%rd34];
	st.u8 	[%rd35+3], %rs4;
	add.s64 	%rd51, %rd51, 4;
	cvt.u32.u64 	%r24, %rd51;
	setp.ne.s32 	%p3, %r14, %r24;
	@%p3 bra 	$L__BB4_3;
$L__BB4_4:
	setp.eq.s32 	%p4, %r25, 0;
	@%p4 bra 	$L__BB4_7;
// %bb.5:
	cvt.u64.u32 	%rd36, %r24;
	add.s64 	%rd37, %rd36, %rd47;
	add.s64 	%rd53, %rd37, 24;
	add.s64 	%rd52, %rd27, %rd36;
$L__BB4_6:                              // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	ld.u8 	%rs5, [%rd52];
	st.u8 	[%rd53], %rs5;
	add.s64 	%rd53, %rd53, 1;
	add.s64 	%rd52, %rd52, 1;
	add.s32 	%r25, %r25, -1;
	setp.ne.s32 	%p5, %r25, 0;
	@%p5 bra 	$L__BB4_6;
$L__BB4_7:
	ld.param.u64 	%rd29, [_bpf_helper_ext_0002_param_3];
	ld.const.u32 	%r15, [%rd32+8];
	setp.lt.s32 	%p6, %r15, 1;
	@%p6 bra 	$L__BB4_14;
// %bb.8:
	ld.param.u64 	%rd28, [_bpf_helper_ext_0002_param_2];
	mov.u32 	%r26, 0;
	cvt.u64.u32 	%rd15, %r15;
	cvt.u32.u64 	%r17, %rd15;
	and.b32  	%r27, %r17, 3;
	setp.lt.u32 	%p7, %r17, 4;
	@%p7 bra 	$L__BB4_11;
// %bb.9:
	add.s64 	%rd14, %rd47, 1073741848;
	and.b64  	%rd16, %rd15, 4294967292;
	add.s64 	%rd17, %rd28, 3;
	mov.u64 	%rd54, 0;
	cvt.u32.u64 	%r18, %rd16;
$L__BB4_10:                             // =>This Inner Loop Header: Depth=1
	add.s64 	%rd42, %rd17, %rd54;
	ld.u8 	%rs6, [%rd42+-3];
	add.s64 	%rd43, %rd14, %rd54;
	st.u8 	[%rd43], %rs6;
	ld.u8 	%rs7, [%rd42+-2];
	st.u8 	[%rd43+1], %rs7;
	ld.u8 	%rs8, [%rd42+-1];
	st.u8 	[%rd43+2], %rs8;
	ld.u8 	%rs9, [%rd42];
	st.u8 	[%rd43+3], %rs9;
	add.s64 	%rd54, %rd54, 4;
	cvt.u32.u64 	%r26, %rd54;
	setp.ne.s32 	%p8, %r18, %r26;
	@%p8 bra 	$L__BB4_10;
$L__BB4_11:
	setp.eq.s32 	%p9, %r27, 0;
	@%p9 bra 	$L__BB4_14;
// %bb.12:
	cvt.u64.u32 	%rd44, %r26;
	add.s64 	%rd45, %rd44, %rd47;
	add.s64 	%rd56, %rd45, 1073741848;
	add.s64 	%rd55, %rd28, %rd44;
$L__BB4_13:                             // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	ld.u8 	%rs10, [%rd55];
	st.u8 	[%rd56], %rs10;
	add.s64 	%rd56, %rd56, 1;
	add.s64 	%rd55, %rd55, 1;
	add.s32 	%r27, %r27, -1;
	setp.ne.s32 	%p10, %r27, 0;
	@%p10 bra 	$L__BB4_13;
$L__BB4_14:
	st.u64 	[%rd47+2147483672], %rd29;
	add.s64 	%rd46, %rd47, 8;
$L__BB4_15:                             // =>This Inner Loop Header: Depth=1
	atom.cas.b32 	%r19, [%rd46], 0, 1;
	setp.eq.s32 	%p11, %r19, 1;
	@%p11 bra 	$L__BB4_15;
// %bb.16:
	mov.u32 	%r21, 2;
	st.u32 	[%rd47+12], %r21;
	st.u64 	[%rd47+16], %rd26;
	add.s64 	%rd48, %rd47, 4;
	mov.u32 	%r20, 42;
	// begin inline asm
	.reg .pred p0;                   
	membar.sys;                      
	st.global.u32 [%rd47], 1;           
	spin_wait:                       
	membar.sys;                      
	ld.global.u32 %r20, [%rd48];          
	setp.eq.u32 p0, %r20, 0;           
	@p0 bra spin_wait;               
	st.global.u32 [%rd48], 0;           
	membar.sys;                      
	
	// end inline asm
	ld.s32 	%rd49, [%rd47+2147483680];
	atom.exch.b32 	%r22, [%rd46], 0;
	st.param.b64 	[func_retval0+0], %rd49;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0003    // -- Begin function _bpf_helper_ext_0003
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0003(
	.param .b64 _bpf_helper_ext_0003_param_0,
	.param .b64 _bpf_helper_ext_0003_param_1,
	.param .b64 _bpf_helper_ext_0003_param_2,
	.param .b64 _bpf_helper_ext_0003_param_3,
	.param .b64 _bpf_helper_ext_0003_param_4
)                                       // @_bpf_helper_ext_0003
{
	.reg .pred 	%p<7>;
	.reg .b16 	%rs<6>;
	.reg .b32 	%r<16>;
	.reg .b64 	%rd<32>;

// %bb.0:
	ld.param.u64 	%rd14, [_bpf_helper_ext_0003_param_0];
	ld.const.u64 	%rd25, [constData];
	shl.b64 	%rd16, %rd14, 4;
	mov.u64 	%rd17, map_info;
	add.s64 	%rd18, %rd17, %rd16;
	ld.const.u32 	%r6, [%rd18+4];
	setp.lt.s32 	%p1, %r6, 1;
	@%p1 bra 	$L__BB5_7;
// %bb.1:
	ld.param.u64 	%rd15, [_bpf_helper_ext_0003_param_1];
	cvt.u64.u32 	%rd3, %r6;
	cvt.u32.u64 	%r8, %rd3;
	and.b32  	%r15, %r8, 3;
	setp.lt.u32 	%p2, %r8, 4;
	mov.u32 	%r14, 0;
	@%p2 bra 	$L__BB5_4;
// %bb.2:
	add.s64 	%rd2, %rd25, 24;
	and.b64  	%rd4, %rd3, 4294967292;
	add.s64 	%rd5, %rd15, 3;
	mov.u64 	%rd29, 0;
	cvt.u32.u64 	%r9, %rd4;
$L__BB5_3:                              // =>This Inner Loop Header: Depth=1
	add.s64 	%rd20, %rd5, %rd29;
	ld.u8 	%rs1, [%rd20+-3];
	add.s64 	%rd21, %rd2, %rd29;
	st.u8 	[%rd21], %rs1;
	ld.u8 	%rs2, [%rd20+-2];
	st.u8 	[%rd21+1], %rs2;
	ld.u8 	%rs3, [%rd20+-1];
	st.u8 	[%rd21+2], %rs3;
	ld.u8 	%rs4, [%rd20];
	st.u8 	[%rd21+3], %rs4;
	add.s64 	%rd29, %rd29, 4;
	cvt.u32.u64 	%r14, %rd29;
	setp.ne.s32 	%p3, %r9, %r14;
	@%p3 bra 	$L__BB5_3;
$L__BB5_4:
	setp.eq.s32 	%p4, %r15, 0;
	@%p4 bra 	$L__BB5_7;
// %bb.5:
	cvt.u64.u32 	%rd22, %r14;
	add.s64 	%rd23, %rd22, %rd25;
	add.s64 	%rd31, %rd23, 24;
	add.s64 	%rd30, %rd15, %rd22;
$L__BB5_6:                              // =>This Inner Loop Header: Depth=1
	.pragma "nounroll";
	ld.u8 	%rs5, [%rd30];
	st.u8 	[%rd31], %rs5;
	add.s64 	%rd31, %rd31, 1;
	add.s64 	%rd30, %rd30, 1;
	add.s32 	%r15, %r15, -1;
	setp.ne.s32 	%p5, %r15, 0;
	@%p5 bra 	$L__BB5_6;
$L__BB5_7:
	add.s64 	%rd24, %rd25, 8;
$L__BB5_8:                              // =>This Inner Loop Header: Depth=1
	atom.cas.b32 	%r10, [%rd24], 0, 1;
	setp.eq.s32 	%p6, %r10, 1;
	@%p6 bra 	$L__BB5_8;
// %bb.9:
	mov.u32 	%r12, 3;
	st.u32 	[%rd25+12], %r12;
	st.u64 	[%rd25+16], %rd14;
	add.s64 	%rd26, %rd25, 4;
	mov.u32 	%r11, 42;
	// begin inline asm
	.reg .pred p0;                   
	membar.sys;                      
	st.global.u32 [%rd25], 1;           
	spin_wait:                       
	membar.sys;                      
	ld.global.u32 %r11, [%rd26];          
	setp.eq.u32 p0, %r11, 0;           
	@p0 bra spin_wait;               
	st.global.u32 [%rd26], 0;           
	membar.sys;                      
	
	// end inline asm
	ld.s32 	%rd27, [%rd25+2147483680];
	atom.exch.b32 	%r13, [%rd24], 0;
	st.param.b64 	[func_retval0+0], %rd27;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0006    // -- Begin function _bpf_helper_ext_0006
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0006(
	.param .b64 _bpf_helper_ext_0006_param_0,
	.param .b64 _bpf_helper_ext_0006_param_1,
	.param .b64 _bpf_helper_ext_0006_param_2,
	.param .b64 _bpf_helper_ext_0006_param_3,
	.param .b64 _bpf_helper_ext_0006_param_4
)                                       // @_bpf_helper_ext_0006
{
	.reg .pred 	%p<4>;
	.reg .b16 	%rs<2>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<22>;

// %bb.0:
	ld.param.u64 	%rd9, [_bpf_helper_ext_0006_param_4];
	ld.param.u64 	%rd8, [_bpf_helper_ext_0006_param_3];
	ld.param.u64 	%rd7, [_bpf_helper_ext_0006_param_2];
	ld.param.u64 	%rd6, [_bpf_helper_ext_0006_param_1];
	ld.const.u64 	%rd1, [constData];
	setp.eq.s64 	%p1, %rd6, 0;
	@%p1 bra 	$L__BB6_3;
// %bb.1:
	ld.param.u64 	%rd5, [_bpf_helper_ext_0006_param_0];
	add.s64 	%rd2, %rd1, 24;
	mov.u64 	%rd21, 0;
$L__BB6_2:                              // =>This Inner Loop Header: Depth=1
	add.s64 	%rd11, %rd5, %rd21;
	ld.u8 	%rs1, [%rd11];
	add.s64 	%rd12, %rd2, %rd21;
	st.u8 	[%rd12], %rs1;
	add.s64 	%rd13, %rd21, 1;
	and.b64  	%rd21, %rd13, 4294967295;
	setp.lt.u64 	%p2, %rd21, %rd6;
	@%p2 bra 	$L__BB6_2;
$L__BB6_3:
	st.u32 	[%rd1+1024], %rd6;
	st.u64 	[%rd1+1032], %rd7;
	st.u64 	[%rd1+1040], %rd8;
	st.u64 	[%rd1+1048], %rd9;
	add.s64 	%rd14, %rd1, 8;
$L__BB6_4:                              // =>This Inner Loop Header: Depth=1
	atom.cas.b32 	%r1, [%rd14], 0, 1;
	setp.eq.s32 	%p3, %r1, 1;
	@%p3 bra 	$L__BB6_4;
// %bb.5:
	mov.u32 	%r3, 6;
	st.u32 	[%rd1+12], %r3;
	mov.u64 	%rd17, 0;
	st.u64 	[%rd1+16], %rd17;
	add.s64 	%rd16, %rd1, 4;
	mov.u32 	%r2, 42;
	// begin inline asm
	.reg .pred p0;                   
	membar.sys;                      
	st.global.u32 [%rd1], 1;           
	spin_wait:                       
	membar.sys;                      
	ld.global.u32 %r2, [%rd16];          
	setp.eq.u32 p0, %r2, 0;           
	@p0 bra spin_wait;               
	st.global.u32 [%rd16], 0;           
	membar.sys;                      
	
	// end inline asm
	ld.s32 	%rd18, [%rd1+2147483680];
	atom.exch.b32 	%r4, [%rd14], 0;
	st.param.b64 	[func_retval0+0], %rd18;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0014    // -- Begin function _bpf_helper_ext_0014
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0014(
	.param .b64 _bpf_helper_ext_0014_param_0,
	.param .b64 _bpf_helper_ext_0014_param_1,
	.param .b64 _bpf_helper_ext_0014_param_2,
	.param .b64 _bpf_helper_ext_0014_param_3,
	.param .b64 _bpf_helper_ext_0014_param_4
)                                       // @_bpf_helper_ext_0014
{
	.reg .pred 	%p<2>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<8>;

// %bb.0:
	ld.const.u64 	%rd3, [constData];
	add.s64 	%rd2, %rd3, 8;
$L__BB7_1:                              // =>This Inner Loop Header: Depth=1
	atom.cas.b32 	%r1, [%rd2], 0, 1;
	setp.eq.s32 	%p1, %r1, 1;
	@%p1 bra 	$L__BB7_1;
// %bb.2:
	mov.u32 	%r3, 14;
	st.u32 	[%rd3+12], %r3;
	mov.u64 	%rd5, 0;
	st.u64 	[%rd3+16], %rd5;
	add.s64 	%rd4, %rd3, 4;
	mov.u32 	%r2, 42;
	// begin inline asm
	.reg .pred p0;                   
	membar.sys;                      
	st.global.u32 [%rd3], 1;           
	spin_wait:                       
	membar.sys;                      
	ld.global.u32 %r2, [%rd4];          
	setp.eq.u32 p0, %r2, 0;           
	@p0 bra spin_wait;               
	st.global.u32 [%rd4], 0;           
	membar.sys;                      
	
	// end inline asm
	ld.u64 	%rd6, [%rd3+2147483680];
	atom.exch.b32 	%r4, [%rd2], 0;
	st.param.b64 	[func_retval0+0], %rd6;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0501    // -- Begin function _bpf_helper_ext_0501
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0501(
	.param .b64 _bpf_helper_ext_0501_param_0,
	.param .b64 _bpf_helper_ext_0501_param_1,
	.param .b64 _bpf_helper_ext_0501_param_2,
	.param .b64 _bpf_helper_ext_0501_param_3,
	.param .b64 _bpf_helper_ext_0501_param_4
)                                       // @_bpf_helper_ext_0501
{
	.reg .pred 	%p<4>;
	.reg .b16 	%rs<6>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<21>;

// %bb.0:
	ld.param.u64 	%rd7, [_bpf_helper_ext_0501_param_0];
	ld.const.u64 	%rd14, [constData];
	add.s64 	%rd2, %rd14, 24;
	ld.u8 	%rs5, [%rd7];
	setp.eq.s16 	%p1, %rs5, 0;
	mov.u64 	%rd20, 0;
	@%p1 bra 	$L__BB8_3;
// %bb.1:
	add.s64 	%rd3, %rd7, 1;
	mov.u64 	%rd20, 0;
$L__BB8_2:                              // =>This Inner Loop Header: Depth=1
	add.s64 	%rd10, %rd2, %rd20;
	st.u8 	[%rd10], %rs5;
	add.s64 	%rd11, %rd3, %rd20;
	ld.u8 	%rs5, [%rd11];
	setp.ne.s16 	%p2, %rs5, 0;
	add.s64 	%rd20, %rd20, 1;
	@%p2 bra 	$L__BB8_2;
$L__BB8_3:
	add.s64 	%rd12, %rd2, %rd20;
	mov.u16 	%rs4, 0;
	st.u8 	[%rd12], %rs4;
	add.s64 	%rd13, %rd14, 8;
$L__BB8_4:                              // =>This Inner Loop Header: Depth=1
	atom.cas.b32 	%r1, [%rd13], 0, 1;
	setp.eq.s32 	%p3, %r1, 1;
	@%p3 bra 	$L__BB8_4;
// %bb.5:
	mov.u32 	%r3, 501;
	st.u32 	[%rd14+12], %r3;
	mov.u64 	%rd16, 0;
	st.u64 	[%rd14+16], %rd16;
	add.s64 	%rd15, %rd14, 4;
	mov.u32 	%r2, 42;
	// begin inline asm
	.reg .pred p0;                   
	membar.sys;                      
	st.global.u32 [%rd14], 1;           
	spin_wait:                       
	membar.sys;                      
	ld.global.u32 %r2, [%rd15];          
	setp.eq.u32 p0, %r2, 0;           
	@p0 bra spin_wait;               
	st.global.u32 [%rd15], 0;           
	membar.sys;                      
	
	// end inline asm
	ld.s32 	%rd17, [%rd14+2147483680];
	atom.exch.b32 	%r4, [%rd13], 0;
	st.param.b64 	[func_retval0+0], %rd17;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0502    // -- Begin function _bpf_helper_ext_0502
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0502(
	.param .b64 _bpf_helper_ext_0502_param_0,
	.param .b64 _bpf_helper_ext_0502_param_1,
	.param .b64 _bpf_helper_ext_0502_param_2,
	.param .b64 _bpf_helper_ext_0502_param_3,
	.param .b64 _bpf_helper_ext_0502_param_4
)                                       // @_bpf_helper_ext_0502
{
	.reg .b64 	%rd<2>;

// %bb.0:
	// begin inline asm
	mov.u64 %rd1, %globaltimer;
	// end inline asm
	st.param.b64 	[func_retval0+0], %rd1;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0503    // -- Begin function _bpf_helper_ext_0503
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0503(
	.param .b64 _bpf_helper_ext_0503_param_0,
	.param .b64 _bpf_helper_ext_0503_param_1,
	.param .b64 _bpf_helper_ext_0503_param_2,
	.param .b64 _bpf_helper_ext_0503_param_3,
	.param .b64 _bpf_helper_ext_0503_param_4
)                                       // @_bpf_helper_ext_0503
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<8>;

// %bb.0:
	ld.param.u64 	%rd1, [_bpf_helper_ext_0503_param_0];
	ld.param.u64 	%rd2, [_bpf_helper_ext_0503_param_1];
	mov.u32 	%r1, %ctaid.x;
	cvt.u64.u32 	%rd3, %r1;
	ld.param.u64 	%rd4, [_bpf_helper_ext_0503_param_2];
	st.u64 	[%rd1], %rd3;
	mov.u32 	%r2, %ctaid.y;
	cvt.u64.u32 	%rd5, %r2;
	st.u64 	[%rd2], %rd5;
	mov.u32 	%r3, %ctaid.z;
	cvt.u64.u32 	%rd6, %r3;
	st.u64 	[%rd4], %rd6;
	mov.u64 	%rd7, 0;
	st.param.b64 	[func_retval0+0], %rd7;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0504    // -- Begin function _bpf_helper_ext_0504
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0504(
	.param .b64 _bpf_helper_ext_0504_param_0,
	.param .b64 _bpf_helper_ext_0504_param_1,
	.param .b64 _bpf_helper_ext_0504_param_2,
	.param .b64 _bpf_helper_ext_0504_param_3,
	.param .b64 _bpf_helper_ext_0504_param_4
)                                       // @_bpf_helper_ext_0504
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<8>;

// %bb.0:
	ld.param.u64 	%rd1, [_bpf_helper_ext_0504_param_0];
	ld.param.u64 	%rd2, [_bpf_helper_ext_0504_param_1];
	mov.u32 	%r1, %ntid.x;
	cvt.u64.u32 	%rd3, %r1;
	ld.param.u64 	%rd4, [_bpf_helper_ext_0504_param_2];
	st.u64 	[%rd1], %rd3;
	mov.u32 	%r2, %ntid.y;
	cvt.u64.u32 	%rd5, %r2;
	st.u64 	[%rd2], %rd5;
	mov.u32 	%r3, %ntid.z;
	cvt.u64.u32 	%rd6, %r3;
	st.u64 	[%rd4], %rd6;
	mov.u64 	%rd7, 0;
	st.param.b64 	[func_retval0+0], %rd7;
	ret;
                                        // -- End function
}
	// .globl	_bpf_helper_ext_0505    // -- Begin function _bpf_helper_ext_0505
.visible .func  (.param .b64 func_retval0) _bpf_helper_ext_0505(
	.param .b64 _bpf_helper_ext_0505_param_0,
	.param .b64 _bpf_helper_ext_0505_param_1,
	.param .b64 _bpf_helper_ext_0505_param_2,
	.param .b64 _bpf_helper_ext_0505_param_3,
	.param .b64 _bpf_helper_ext_0505_param_4
)                                       // @_bpf_helper_ext_0505
{
	.reg .b32 	%r<4>;
	.reg .b64 	%rd<8>;

// %bb.0:
	ld.param.u64 	%rd1, [_bpf_helper_ext_0505_param_0];
	ld.param.u64 	%rd2, [_bpf_helper_ext_0505_param_1];
	mov.u32 	%r1, %tid.x;
	cvt.u64.u32 	%rd3, %r1;
	ld.param.u64 	%rd4, [_bpf_helper_ext_0505_param_2];
	st.u64 	[%rd1], %rd3;
	mov.u32 	%r2, %tid.y;
	cvt.u64.u32 	%rd5, %r2;
	st.u64 	[%rd2], %rd5;
	mov.u32 	%r3, %tid.z;
	cvt.u64.u32 	%rd6, %r3;
	st.u64 	[%rd4], %rd6;
	mov.u64 	%rd7, 0;
	st.param.b64 	[func_retval0+0], %rd7;
	ret;
                                        // -- End function
}
)";
